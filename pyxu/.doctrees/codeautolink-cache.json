{
  "fair/plugins/CSEEG": [],
  "fair/plugins/DSP-Notebooks": [],
  "fair/plugins/EnvironTracker": [],
  "fair/plugins/HVOX": [],
  "examples/index": [],
  "fair/contribute": [],
  "fair/howto": [],
  "fair/index": [],
  "fair/plugins/HoughDetector": [],
  "fair/plugins/OrientationPy": [],
  "fair/plugins/PYFW": [],
  "fair/plugins/Palentologist": [],
  "fair/plugins/PhaseRet": [],
  "fair/plugins/PycGSP": [],
  "fair/plugins/PycSphere": [],
  "fair/plugins/TVDenoiser": [],
  "fair/plugins/TokemakRec": [],
  "fair/plugins/UncertaintyQuant": [],
  "fair/plugins/WaveProp": [],
  "fair/plugins/index": [],
  "guide/index": [],
  "index": [],
  "intro/comparison": [],
  "intro/index": [],
  "fair/plugins/pycNUFFT": [],
  "fair/plugins/pycWavelet": [],
  "fair/score": [],
  "guide/fwdops": [
    {
      "source": "class Sum(LinOp):\n    def apply(self, arr):\n        return arr.sum()\n\n    def adjoint(self, arr):\n        return arr * np.ones(self.shape[1])",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "The-Importance-of-Matrix-Free-Operators",
        "headings": [
          "Forward Operators",
          "The Importance of Matrix-Free Operators"
        ]
      },
      "doc_lineno": 22
    },
    {
      "source": "class Sum(LinOp):",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "The-Importance-of-Matrix-Free-Operators",
        "headings": [
          "Forward Operators",
          "The Importance of Matrix-Free Operators"
        ]
      },
      "doc_lineno": 35
    },
    {
      "source": "def apply(self, arr):\n    return arr.sum()",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "The-Importance-of-Matrix-Free-Operators",
        "headings": [
          "Forward Operators",
          "The Importance of Matrix-Free Operators"
        ]
      },
      "doc_lineno": 43
    },
    {
      "source": "def adjoint(self, arr):\n    return arr * np.ones(self.shape[1])",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "The-Importance-of-Matrix-Free-Operators",
        "headings": [
          "Forward Operators",
          "The Importance of Matrix-Free Operators"
        ]
      },
      "doc_lineno": 52
    },
    {
      "source": "my_operator.lipschitz = my_operator.estimate_lipschitz()",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "Additional-Features-of-LinOp:-Batteries-Included",
        "headings": [
          "Forward Operators",
          "Additional Features of LinOp: Batteries Included"
        ]
      },
      "doc_lineno": 95
    },
    {
      "source": "pseudo_inv_result = my_operator.pinv(my_array, damp=value)",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "Additional-Features-of-LinOp:-Batteries-Included",
        "headings": [
          "Forward Operators",
          "Additional Features of LinOp: Batteries Included"
        ]
      },
      "doc_lineno": 105
    },
    {
      "source": "op = LinOp.from_array(np.ones((N, N)))",
      "names": [],
      "example": {
        "document": "guide/fwdops",
        "ref_id": "Additional-Features-of-LinOp:-Batteries-Included",
        "headings": [
          "Forward Operators",
          "Additional Features of LinOp: Batteries Included"
        ]
      },
      "doc_lineno": 111
    }
  ],
  "api/math": [],
  "api/operator/blocks": [],
  "api/operator/func": [],
  "api/operator/index": [],
  "intro/installation": [],
  "intro/primer": [],
  "intro/tomo": [
    {
      "source": "seed = 0\n# Generate phantom with xdesign\nnp.random.seed(seed)\np1 = xd.Foam(size_range=[0.1, 0.01], gap=0.025, porosity=0.5)\nphantom = xd.discrete_phantom(p1, 160) * 10\nphantom = np.abs(np.pad(phantom, 20))\n\n# Generate theoretical and empirical sinogram\nrng = np.random.default_rng(seed)\npsnr = 20\nangles, wsize = 90, 5\nideal_sino = ski.transform.radon(phantom, theta=np.linspace(0, 180, angles), circle=True)\nsino = sp.ndimage.uniform_filter(ideal_sino, [wsize, 0], mode='constant')\nmask = rng.binomial(1, 0.95, sino.shape)\nsino *= mask\nsino *= sp.signal.get_window('hamming', sino.shape[0])[:, None]\nsigma = np.abs(sino).max() * (10**(-psnr/10))\nsino += rng.normal(scale=sigma, size=sino.shape)\n\n# Plot phantom and sinograms\n_ = plt.subplot(1,3,1)\n_ = plt.imshow(phantom)\n_ = plt.title(\"Phantom\")\n_ = plt.axis('off')\n\n_ = plt.subplot(1,3,2)\n_ = plt.imshow(ideal_sino, aspect=0.45)\n_ = plt.title(\"Ideal Sinogram\")\n_ = plt.axis('off')\n\n\n_ = plt.subplot(1,3,3)\n_ = plt.imshow(sino, aspect=0.45)\n_ = plt.title(\"Measured Sinogram\")\n_ = plt.axis('off')",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "A-Non-Ideal-Parrallel-beam-Tomographic-Setup",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "A Non-Ideal Parrallel-beam Tomographic Setup"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fbp_ideal = ski.transform.iradon(radon_image=ideal_sino, filter_name=\"hamming\")\nfbp_measured = ski.transform.iradon(radon_image=sino, filter_name=\"hamming\")\nsino_fillin = sp.ndimage.uniform_filter(sino, [wsize, 0], mode='constant')\nfbp_fillin = ski.transform.iradon(radon_image=sino_fillin, filter_name=\"hamming\")\n\n_ = plt.subplot(2,3,1)\n_ = plt.imshow(phantom)\n_ = plt.title('Phantom')\n_ = plt.axis('off')\n\n_ = plt.subplot(2,3,2)\n_ = plt.imshow(fbp_ideal)\n_ = plt.title('FBP (Ideal Sinogram)')\n_ = plt.axis('off')\n\n_ = plt.subplot(2,3,3)\n_ = plt.imshow(fbp_measured)\n_ = plt.title('FBP (Measured Sinogram)')\n_ = plt.axis('off')\n\n_ = plt.subplot(2,3,6)\n_ = plt.imshow(fbp_fillin)\n_ = plt.title('FBP (Filled-in Measured Sinogram)')\n_ = plt.axis('off')",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Naive-Application-of-Filtered-Back-Projection",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Naive Application of Filtered-Back Projection"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import pyxu.abc as pxa\nimport pyxu.operator as pxo\nfrom pyxu.operator.interop import from_source\nimport skimage.transform as skt\n\n# Radon Operator\nRadon = from_source(cls=pxa.LinOp,\n                    shape=(sino.size, phantom.size),\n                    apply=lambda self, arr: skt.radon(arr.reshape(phantom.shape),\n                                                      theta=np.linspace(0, 180, angles),\n                                                      circle=True).ravel(),\n                    adjoint=lambda self, arr: skt.iradon(arr.reshape(sino.shape),\n                                                         filter_name=None,\n                                                         circle=True).ravel(),\n                    vectorize=[\"apply\", \"adjoint\"], vmethod=\"scan\", enforce_precision=[\"apply\", \"adjoint\"])\n\n# 1D Filtering\nboxcar = np.asarray(sp.signal.get_window(\"boxcar\", wsize)); boxcar /= wsize\nBoxCar1D = pxo.Stencil(kernel=[boxcar, np.array([1.0])], center=(wsize // 2, 0), arg_shape=sino.shape,)\n\n# Partial Masking\nMask = pxo.DiagonalOp(mask.ravel())\n\n# Tapering\ntaper = np.outer(sp.signal.get_window(\"hamming\", sino.shape[0]), np.ones(sino.shape[1]))\nTaper = pxo.DiagonalOp(taper.ravel())\n\n# Compose operators\nPhi = Taper * Mask * BoxCar1D * Radon",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_source"
          ],
          "code_str": "from_source",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.interop.source.from_source"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pxa.LinOp",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_source"
          ],
          "code_str": "from_source",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.source.from_source"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Stencil"
          ],
          "code_str": "pxo.Stencil",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Stencil"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Stencil",
            "()"
          ],
          "code_str": "BoxCar1D",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Stencil"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DiagonalOp"
          ],
          "code_str": "pxo.DiagonalOp",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.base.DiagonalOp"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DiagonalOp"
          ],
          "code_str": "pxo.DiagonalOp",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.base.DiagonalOp"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Stencil",
            "()"
          ],
          "code_str": "BoxCar1D",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Stencil"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pyxu's-Modularity-to-the-Rescue",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Pyxu\u2019s Modularity to the Rescue"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "print(Phi.expr())",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pyxu's-Modularity-to-the-Rescue",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Pyxu\u2019s Modularity to the Rescue"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "predicted_sino = Phi(phantom.ravel()).reshape(sino.shape)",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pyxu's-Modularity-to-the-Rescue",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Pyxu\u2019s Modularity to the Rescue"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "_ = plt.subplot(1,3,1)\n_ = plt.imshow(sino, aspect=0.45)\n_ = plt.title(\"Measured Sinogram\")\n_ = plt.axis('off')\n\n_ = plt.subplot(1,3,2)\n_ = plt.imshow(predicted_sino, aspect=0.45)\n_ = plt.title(\"Predicted Sinogram\")\n_ = plt.axis('off')\n\n_ = plt.subplot(1,3,3)\n_ = plt.imshow(np.abs(sino-predicted_sino), aspect=0.45)\n_ = plt.title(\"Absolute Difference\")\n_ = plt.axis('off')",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pyxu's-Modularity-to-the-Rescue",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Pyxu\u2019s Modularity to the Rescue"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import pyxu.opt.stop as pxs\n\ndefault_stop_crit = pxs.RelError(eps=1e-3, var=\"x\", f=None, norm=2, satisfy_all=True) | pxs.MaxIter(500)\npinv_solution = Phi.pinv(sino.ravel(), damp=4,\n                         kwargs_init=dict(show_progress=False, verbosity=50),\n                         kwargs_fit=dict(stop_crit=default_stop_crit))",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "RelError"
          ],
          "code_str": "pxs.RelError",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.RelError"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "pxs.MaxIter",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "dict"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "dict"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pseudoinverse-Solution",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Pseudoinverse Solution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "_ = plt.subplot(1,3,1)\n_ = plt.imshow(phantom)\n_ = plt.title('Phantom')\n_ = plt.axis('off')\n\n_ = plt.subplot(1,3,2)\n_ = plt.imshow(fbp_fillin)\n_ = plt.title('Filtered Back Projection')\n_ = plt.axis('off')\n\n_ = plt.subplot(1,3,3)\n_ = plt.imshow(pinv_solution.reshape(phantom.shape))\n_ = plt.title('Pseudoinverse Solution')\n_ = plt.axis('off')",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Pseudoinverse-Solution",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Pseudoinverse Solution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from pyxu.operator import Gradient, SquaredL2Norm, L1Norm, PositiveOrthant, PositiveL1Norm\n\n# TV prior\ngrad = Gradient(arg_shape=phantom.shape, accuracy=4, mode='constant', diff_method='fd')\nlambda_= 0.05 / (2 * sigma**2)\nhuber_norm = L1Norm(grad.shape[0]).moreau_envelope(0.01) #We smooth the L1 norm to facilitate optimisation\ntv_prior = lambda_ * huber_norm * grad\n\n# Positivity + L1 norm\nposL1 = 0.05 * PositiveL1Norm(phantom.size)\n\n# Loss\nloss = (1/ (2 * sigma**2)) * SquaredL2Norm(dim=sino.size).asloss(sino.ravel()) * Phi\n\n# Smooth part of the posterior\nsmooth_posterior = loss + tv_prior\nsmooth_posterior.diff_lipschitz = smooth_posterior.estimate_diff_lipschitz(method=\"svd\", tol=0.1)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "L1Norm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveOrthant"
          ],
          "code_str": "PositiveOrthant",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.indicator.PositiveOrthant"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveL1Norm"
          ],
          "code_str": "PositiveL1Norm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.func.norm.PositiveL1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "L1Norm",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm",
            "()",
            "moreau_envelope"
          ],
          "code_str": "moreau_envelope",
          "lineno": 6,
          "end_lineno": 6,
          "context": "after_call",
          "resolved_location": "pyxu.abc.operator.ProxFunc.moreau_envelope"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveL1Norm"
          ],
          "code_str": "PositiveL1Norm",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.PositiveL1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm",
            "()",
            "asloss"
          ],
          "code_str": "asloss",
          "lineno": 13,
          "end_lineno": 13,
          "context": "after_call",
          "resolved_location": "pyxu.abc.operator.Func.asloss"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# TV prior\ngrad = Gradient(arg_shape=phantom.shape, accuracy=4, mode='constant', diff_method='fd')\nlambda_= 0.05 / (2 * sigma**2)\nhuber_norm = L1Norm(grad.shape[0]).moreau_envelope(0.01)\ntv_prior = lambda_ * huber_norm * grad",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "L1Norm",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm",
            "()",
            "moreau_envelope"
          ],
          "code_str": "moreau_envelope",
          "lineno": 4,
          "end_lineno": 4,
          "context": "after_call",
          "resolved_location": "pyxu.abc.operator.ProxFunc.moreau_envelope"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": 679
    },
    {
      "source": "# Positivity + L1 norm\nposL1 = 0.05 * PositiveL1Norm(phantom.size)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "PositiveL1Norm"
          ],
          "code_str": "PositiveL1Norm",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.PositiveL1Norm"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": 693
    },
    {
      "source": "# Loss\nloss = (1/ (2 * sigma**2)) * SquaredL2Norm(dim=sino.size).asloss(sino.ravel()) * Phi",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "SquaredL2Norm",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm",
            "()",
            "asloss"
          ],
          "code_str": "asloss",
          "lineno": 2,
          "end_lineno": 2,
          "context": "after_call",
          "resolved_location": "pyxu.abc.operator.Func.asloss"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": 702
    },
    {
      "source": "# Posterior\nsmooth_posterior = loss + tv_prior\nbeta = smooth_posterior.estimate_diff_lipschitz(method=\"svd\", tol=0.1)",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": 713
    },
    {
      "source": "from pyxu.opt.solver import PGD\n\n# Define the solver\nsolver = PGD(f=smooth_posterior, g=posL1, show_progress=False, verbosity=250)\n\n# Call fit to trigger the solver\nsolver.fit(x0=0*pinv_solution.ravel(), acceleration=True, stop_crit=default_stop_crit)\nrecon_tv = solver.solution().squeeze()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()"
          ],
          "code_str": "solver",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()",
            "fit"
          ],
          "code_str": "solver.fit",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.fit"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()",
            "solution"
          ],
          "code_str": "solver.solution",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.solution"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "_ = plt.subplot(1,3,1)\n_ = plt.imshow(fbp_fillin)\n_ = plt.title('Filtered Back Projection')\n_ = plt.axis('off')\n\n_ = plt.subplot(1,3,2)\n_ = plt.imshow(pinv_solution.reshape(phantom.shape))\n_ = plt.title('Pseudoinverse Solution')\n_ = plt.axis('off')\n\n_ = plt.subplot(1,3,3)\n_ = plt.imshow(recon_tv.reshape(phantom.shape))\n_ = plt.title('MAP Solution (TV+)')\n_ = plt.axis('off')",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Bayesian-Inversion",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Bayesian Inversion"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from scipy.ndimage import median_filter\n\ndef denoiser(arr, arg_shape, wsize):\n    arr = arr.reshape(arg_shape)\n    return median_filter(arr, size=wsize).ravel()\n\nclass MedianFilterPnP(pxa.ProxDiffFunc):\n    def __init__(self, arg_shape, wsize):\n        super().__init__((1,np.prod(arg_shape)))\n        self._arg_shape = arg_shape\n        self.wsize= wsize\n        self.diff_lipschitz = 1\n\n    def apply(self, arr):\n        return NotImplemented # PnP priors are implicit, they do not have an apply method!\n\n    def grad(self, arr):\n        return arr - denoiser(arr, self._arg_shape, self.wsize) # Differential form\n\n    def prox(self, arr, tau=None): # Parameter tau is not used since this is not a proper proximal operator.\n        return denoiser(arr, self._arg_shape, self.wsize) # Proximal form",
      "names": [
        {
          "import_components": [
            "scipy",
            "ndimage"
          ],
          "code_str": "scipy.ndimage",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "scipy.ndimage"
        },
        {
          "import_components": [
            "scipy",
            "ndimage",
            "median_filter"
          ],
          "code_str": "median_filter",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "scipy.ndimage.median_filter"
        },
        {
          "import_components": [
            "scipy",
            "ndimage",
            "median_filter"
          ],
          "code_str": "median_filter",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "scipy.ndimage.median_filter"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxDiffFunc"
          ],
          "code_str": "pxa.ProxDiffFunc",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.ProxDiffFunc"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "NotImplemented"
          ],
          "code_str": "NotImplemented",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "NotImplemented"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "medpnp = MedianFilterPnP(phantom.shape, (3,3))",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "loss.diff_lipschitz = loss.estimate_diff_lipschitz(method=\"svd\", tol=0.1)",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Define the solver\nsolver = PGD(f=loss, g=medpnp, show_progress=False, verbosity=75)\n\n# Call fit to trigger the solver\nsolver.fit(x0=pinv_solution.ravel(), acceleration=True, stop_crit=pxs.MaxIter(250))\nrecon_pnp_prox = solver.solution().squeeze()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()"
          ],
          "code_str": "solver",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "pxs.MaxIter",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()",
            "fit"
          ],
          "code_str": "solver.fit",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.fit"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()",
            "solution"
          ],
          "code_str": "solver.solution",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.solution"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Define new composite smooth term (sum of the loss and weighted implicit prior)\ncomposite_smooth = loss + 0.1 * medpnp\n\n# Define the solver\nsolver = PGD(f=composite_smooth, g=None, show_progress=False, verbosity=75)\n\n# Call fit to trigger the solver\nsolver.fit(x0=pinv_solution.ravel(), acceleration=True, stop_crit=pxs.MaxIter(250))\nrecon_pnp_smooth = solver.solution().squeeze()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()"
          ],
          "code_str": "solver",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "pxs.MaxIter",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()",
            "fit"
          ],
          "code_str": "solver.fit",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.fit"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()",
            "solution"
          ],
          "code_str": "solver.solution",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.solution"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "_ = plt.subplot(2,3,1)\n_ = plt.imshow(pinv_solution.reshape(phantom.shape))\n_ = plt.title('Pseudoinverse Solution')\n_ = plt.axis('off')\n\n_ = plt.subplot(2,3,2)\n_ = plt.imshow(recon_tv.reshape(phantom.shape))\n_ = plt.title('MAP Solution (TV+)')\n_ = plt.axis('off')\n\n_ = plt.subplot(2,3,3)\n_ = plt.imshow(recon_pnp_prox.reshape(phantom.shape))\n_ = plt.title('PnP (Prox)')\n_ = plt.axis('off')\n\n_ = plt.subplot(2,3,6)\n_ = plt.imshow(recon_pnp_smooth.reshape(phantom.shape))\n_ = plt.title('PnP (Diff)')\n_ = plt.axis('off')",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "medpnp = MedianFilterPnP(phantom.shape, (5,5))",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Define the solver\nsolver = PGD(f=loss, g=medpnp, show_progress=False, verbosity=75)\n\n# Call fit to trigger the solver\nsolver.fit(x0=pinv_solution.ravel(), acceleration=True, stop_crit=pxs.MaxIter(250))\nrecon_pnp_prox = solver.solution().squeeze()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD"
          ],
          "code_str": "PGD",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()"
          ],
          "code_str": "solver",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pgd.PGD"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "stop",
            "MaxIter"
          ],
          "code_str": "pxs.MaxIter",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.opt.stop.MaxIter"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()",
            "fit"
          ],
          "code_str": "solver.fit",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.fit"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PGD",
            "()",
            "solution"
          ],
          "code_str": "solver.solution",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.solution"
        }
      ],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "_ = plt.subplot(1,3,1)\n_ = plt.imshow(pinv_solution.reshape(phantom.shape))\n_ = plt.title('Pseudoinverse Solution')\n_ = plt.axis('off')\n\n_ = plt.subplot(1,3,2)\n_ = plt.imshow(recon_tv.reshape(phantom.shape))\n_ = plt.title('MAP Solution (TV+)')\n_ = plt.axis('off')\n\n_ = plt.subplot(1,3,3)\n_ = plt.imshow(recon_pnp_prox.reshape(phantom.shape))\n_ = plt.title('PnP (Prox)')\n_ = plt.axis('off')",
      "names": [],
      "example": {
        "document": "intro/tomo",
        "ref_id": "Basic-Equations",
        "headings": [
          "Hands-on Example: Computerised Tomography with Pyxu",
          "Image Reconstruction with Pyxu",
          "Plug-and-Play Reconstruction Schemes",
          "Basic Equations"
        ]
      },
      "doc_lineno": null
    }
  ],
  "references": [],
  "api/runtime": [],
  "api/util": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-3, 3, 1000)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\nplt.figure()\nplt.imshow(z)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        }
      ],
      "example": {
        "document": "api/util",
        "ref_id": "module-pyxu.util.misc",
        "headings": [
          "pyxu.util",
          "Table of Contents",
          "pyxu.util.misc"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.util.misc import star_like_sample\n\nstar = star_like_sample(N=256, w=8, s=20, po=3, x0=0.7)\nplt.figure()\nplt.imshow(star)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "star_like_sample"
          ],
          "code_str": "star_like_sample",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.star_like_sample"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "star_like_sample"
          ],
          "code_str": "star_like_sample",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.util.misc.star_like_sample"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        }
      ],
      "example": {
        "document": "api/util",
        "ref_id": "module-pyxu.util.misc",
        "headings": [
          "pyxu.util",
          "Table of Contents",
          "pyxu.util.misc"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "examples/DifferentialOperators": [
    {
      "source": "def D(f):\n    \"\"\"\n    Computes the partial derivative via forward finite differences.\n\n    Input\n    -----\n    f: vector\n        Input signal\n\n    Output\n    ------\n    y: vector\n        Derivative\n    \"\"\"\n\n    y = np.zeros_like(f)\n    for n in range(len(f) - 1):\n        y[n] = f[n + 1] - f[n]\n    return y",
      "names": [
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "range"
        }
      ],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "1.-Partial-derivatives",
        "headings": [
          "Differential operators in Pyxu",
          "1. Partial derivatives"
        ]
      },
      "doc_lineno": 86
    },
    {
      "source": "def finite_difference(\n        arg_shape: pyct.NDArrayShape,\n        order: cabc.Sequence[pyct.Integer, ...],\n        scheme: typ.Union[str, cabc.Sequence[str, ...]] = \"forward\",\n        accuracy: typ.Union[pyct.Integer, cabc.Sequence[pyct.Integer, ...]] = 1,\n        mode: ModeSpec = \"constant\",\n        gpu: bool = False,\n        dtype: typ.Optional[pyct.DType] = None,\n        sampling: typ.Union[pyct.Real, cabc.Sequence[pyct.Real, ...]] = 1,\n    ) -> pyct.OpT",
      "names": [],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "1.1.-Parameters",
        "headings": [
          "Differential operators in Pyxu",
          "1. Partial derivatives",
          "1.1. Parameters"
        ]
      },
      "doc_lineno": 156
    },
    {
      "source": "def gaussian_derivative(\n        arg_shape: pyct.NDArrayShape,\n        order: cabc.Sequence[pyct.Integer, ...],\n        sigma: typ.Union[pyct.Real, cabc.Sequence[pyct.Real, ...]] = 1.0,\n        truncate: typ.Union[pyct.Real, cabc.Sequence[pyct.Real, ...]] = 3.0,\n        mode: ModeSpec = \"constant\",\n        gpu: bool = False,\n        dtype: typ.Optional[pyct.DType] = None,\n        sampling: typ.Union[pyct.Real, cabc.Sequence[pyct.Real, ...]] = 1,\n    ) -> pyct.OpT",
      "names": [],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "1.1.-Parameters",
        "headings": [
          "Differential operators in Pyxu",
          "1. Partial derivatives",
          "1.1. Parameters"
        ]
      },
      "doc_lineno": 171
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\n\nrng = np.random.default_rng(0)\n\nfrom pyxu.operator import PartialDerivative",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        }
      ],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "1.2.-Finite-differences",
        "headings": [
          "Differential operators in Pyxu",
          "1. Partial derivatives",
          "1.2. Finite differences"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# 1) Define ground truth signal\n\nN = 500  # number of points\nx_ax = np.linspace(0, 2 * np.pi, N)  # coordinates\ndx = x_ax[1] - x_ax[0]  # sampling or pixel size\n\narr = np.sin(x_ax)  # ground truth signal\nderivative = np.cos(x_ax)  # ground truth derivative\n\n\n# 2) Define noisy measurements\nnoise = rng.normal(scale=0.01, size=N)\narr_noisy = arr + noise\n\n\n# 3) Instantiate partial derivative operator via finite differences\nfinite_difference = PartialDerivative.finite_difference(\n    arg_shape=(N,),\n    order=(1,),\n    scheme=\"forward\",\n    accuracy=1,\n    sampling=dx,  # we should include the pixel size for accurate approximation\n)\n\n# 4) Estimate derivative\nderivative_fd = finite_difference(arr)\nderivative_fd_noisy = finite_difference(arr_noisy)\n\n# 5) Plot results\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x_ax, arr, label=\"Signal\", c=\"k\")\naxs[0].plot(x_ax, arr_noisy, label=\"Noisy signal\", zorder=0, c=\"C1\")\n\naxs[1].plot(x_ax, derivative, label=\"Derivative of non-noisy signal\", c=\"k\")\naxs[1].plot(\n    x_ax, derivative_fd, ls=\"--\", label=\"Finite difference (non-noisy signal)\", c=\"C2\"\n)\naxs[1].plot(\n    x_ax,\n    derivative_fd_noisy,\n    label=\"Finite difference (noisy signal)\",\n    zorder=0,\n    c=\"C3\",\n)\n\nfor ax in axs.ravel():\n    ax.set_xlabel(\"Time [s]\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.legend();",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.cos"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative",
            "finite_difference"
          ],
          "code_str": "PartialDerivative.finite_difference",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative.finite_difference"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "1.2.-Finite-differences",
        "headings": [
          "Differential operators in Pyxu",
          "1. Partial derivatives",
          "1.2. Finite differences"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "gaussian_derivative = PartialDerivative.gaussian_derivative(\n    arg_shape=(N,), order=(1,), sigma=dx, truncate=1, sampling=(dx,)\n)\ngaussian_derivative.visualize()",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative",
            "gaussian_derivative"
          ],
          "code_str": "PartialDerivative.gaussian_derivative",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative.gaussian_derivative"
        }
      ],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "1.3.Gaussian-derivative",
        "headings": [
          "Differential operators in Pyxu",
          "1. Partial derivatives",
          "1.3.Gaussian derivative"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "derviative_gd = gaussian_derivative(arr_noisy)\nderviative_fd = finite_difference(arr_noisy)\n\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x_ax, arr, label=\"Signal\", c=\"k\")\naxs[0].plot(x_ax, arr_noisy, label=\"Noisy signal\", zorder=0, c=\"C1\")\n\naxs[1].plot(x_ax, derivative, label=\"Derivative of non-noisy signal\", c=\"k\")\naxs[1].plot(\n    x_ax,\n    derivative_fd_noisy,\n    label=\"Finite difference (noisy signal)\",\n    zorder=0,\n    c=\"C3\",\n)\naxs[1].plot(\n    x_ax, derviative_gd, label=\"Gaussian derivative (noisy signal)\", c=\"C4\", zorder=1\n)\n\nfor ax in axs.ravel():\n    ax.set_xlabel(\"Time [s]\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.legend();",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "1.3.Gaussian-derivative",
        "headings": [
          "Differential operators in Pyxu",
          "1. Partial derivatives",
          "1.3.Gaussian derivative"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "gaussian_derivative_accurate = PartialDerivative.gaussian_derivative(\n    arg_shape=(N,), order=(1,), sigma=dx, truncate=4, sampling=(dx,)\n)\n\n\nderviative_gd_accurate = gaussian_derivative_accurate(arr_noisy)\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\naxs[0].plot(x_ax, arr, label=\"Signal\", c=\"k\")\naxs[0].plot(x_ax, arr_noisy, label=\"Noisy signal\", zorder=0, c=\"C1\")\n\naxs[1].plot(x_ax, derivative, label=\"Derivative of non-noisy signal\", c=\"k\")\naxs[1].plot(\n    x_ax, derviative_gd, label=\"Gaussian derivative (1x$\\sigma$)\", c=\"C4\", zorder=0\n)\naxs[1].plot(\n    x_ax,\n    derviative_gd_accurate,\n    label=\"Gaussian derivative (4x$\\sigma$)\",\n    c=\"C6\",\n    zorder=1,\n)\n\nfor ax in axs.ravel():\n    ax.set_xlabel(\"Time [s]\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.legend();",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative",
            "gaussian_derivative"
          ],
          "code_str": "PartialDerivative.gaussian_derivative",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative.gaussian_derivative"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "1.3.Gaussian-derivative",
        "headings": [
          "Differential operators in Pyxu",
          "1. Partial derivatives",
          "1.3.Gaussian derivative"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "def Gradient(\n    arg_shape: pyct.NDArrayShape,\n    directions: typ.Optional[pyct.NDArrayAxis] = None,\n    diff_method: str = \"fd\",\n    mode: ModeSpec = \"constant\",\n    gpu: bool = False,\n    dtype: typ.Optional[pyct.DType] = None,\n    parallel: bool = False,\n    **diff_kwargs,\n) -> pyct.OpT:",
      "names": [],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "2.1.-Parameters",
        "headings": [
          "Differential operators in Pyxu",
          "2. Stacks of partial derivatives",
          "2.1. Parameters"
        ]
      },
      "doc_lineno": 680
    },
    {
      "source": "def Hessian(\n    arg_shape: pyct.NDArrayShape,\n    directions: typ.Union[\n        str,\n        cabc.Sequence[pyct.Integer, pyct.Integer],\n        cabc.Sequence[cabc.Sequence[pyct.Integer, pyct.Integer], ...],\n    ] = \"all\",\n    diff_method: str = \"fd\",\n    mode: ModeSpec = \"constant\",\n    gpu: bool = False,\n    dtype: typ.Optional[pyct.DType] = None,\n    parallel: bool = False,\n    **diff_kwargs,\n) -> pyct.OpT:",
      "names": [],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "2.1.-Parameters",
        "headings": [
          "Differential operators in Pyxu",
          "2. Stacks of partial derivatives",
          "2.1. Parameters"
        ]
      },
      "doc_lineno": 694
    },
    {
      "source": "from PIL import Image\nfrom pyxu.operator import Gradient\n\ntoucan = np.array(Image.open(\"../_static/favicon.png\").convert(\"L\"))\ntoucan = toucan.astype(float)\ntoucan /= toucan.max()\n\ngrad = Gradient(\n    arg_shape=toucan.shape,\n    diff_type=\"gd\",\n    sigma=6,\n)\n\nout = grad.unravel(grad(toucan.ravel()))\n\n# Plot\nfig = plt.figure(figsize=(8, 6), constrained_layout=True)\ngs = fig.add_gridspec(4, 2)\naxs = [\n    fig.add_subplot(gs[1:-1, 0]),\n    fig.add_subplot(gs[:2, 1]),\n    fig.add_subplot(gs[2:, 1]),\n]\nim = axs[0].imshow(toucan, cmap=\"gray_r\")\naxs[0].set_title(r\"$\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[0])\nim = axs[1].imshow(\n    out[1], cmap=\"seismic\", vmin=-np.max(np.abs(out[1])), vmax=np.max(np.abs(out[1]))\n)\naxs[1].set_title(r\"$\\nabla_{x}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[1])\nim = axs[2].imshow(\n    out[0], cmap=\"seismic\", vmin=-np.max(np.abs(out[0])), vmax=np.max(np.abs(out[0]))\n)\naxs[2].set_title(r\"$\\nabla_{y}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[2])\n\nfor ax in axs:\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel(r\"$x$\")\n    ax.set_ylabel(r\"$y$\")",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Gradient"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Gradient"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "2.2.-Gradient",
        "headings": [
          "Differential operators in Pyxu",
          "2. Stacks of partial derivatives",
          "2.2. Gradient"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from pyxu.operator import Hessian\n\nhes = Hessian(\n    arg_shape=toucan.shape,\n    diff_type=\"gd\",\n    sigma=6,\n)\n\nout = hes.unravel(hes(toucan.ravel()))\n\n# Plot\nfig = plt.figure(figsize=(12, 6), constrained_layout=True)\ngs = fig.add_gridspec(4, 3)\naxs = [\n    fig.add_subplot(gs[1:-1, 0]),\n    fig.add_subplot(gs[:2, 1]),\n    fig.add_subplot(gs[2:, 1]),\n    fig.add_subplot(gs[:2, 2]),\n    fig.add_subplot(gs[2:, 2]),\n]\nim = axs[0].imshow(toucan, cmap=\"gray_r\")\naxs[0].set_title(r\"$\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[0])\nim = axs[1].imshow(\n    out[2], cmap=\"seismic\", vmin=-np.max(np.abs(out[2])), vmax=np.max(np.abs(out[2]))\n)\naxs[1].set_title(r\"$\\mathbf{H}_{xx}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[1])\nim = axs[2].imshow(\n    out[1], cmap=\"seismic\", vmin=-np.max(np.abs(out[1])), vmax=np.max(np.abs(out[1]))\n)\naxs[2].set_title(r\"$\\mathbf{H}_{yx}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[2])\nim = axs[3].imshow(\n    out[0], cmap=\"seismic\", vmin=-np.max(np.abs(out[0])), vmax=np.max(np.abs(out[0]))\n)\naxs[3].set_title(r\"$\\mathbf{H}_{xy}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[3])\nim = axs[4].imshow(\n    out[0], cmap=\"seismic\", vmin=-np.max(np.abs(out[0])), vmax=np.max(np.abs(out[0]))\n)\naxs[4].set_title(r\"$\\mathbf{H}_{yy}\\mathbf{f}$\")\nplt.colorbar(im, ax=axs[4])\n\nfor ax in axs:\n    ax.set_xticks([])\n    ax.set_yticks([])\n    ax.set_xlabel(r\"$x$\")\n    ax.set_ylabel(r\"$y$\")",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Hessian"
          ],
          "code_str": "Hessian",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Hessian"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Hessian"
          ],
          "code_str": "Hessian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Hessian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "numpy",
            "max"
          ],
          "code_str": "np.max",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "numpy.max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "examples/DifferentialOperators",
        "ref_id": "2.3.-Hessian",
        "headings": [
          "Differential operators in Pyxu",
          "2. Stacks of partial derivatives",
          "2.3. Hessian"
        ]
      },
      "doc_lineno": null
    }
  ],
  "examples/Stencils": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nimport skimage\nfrom pyxu.operator import Convolve",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve"
          ],
          "code_str": "Convolve",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": null,
        "headings": []
      },
      "doc_lineno": null
    },
    {
      "source": "npix = 128\ndata = skimage.data.binary_blobs(\n    length=npix, blob_size_fraction=0.5, n_dim=2, volume_fraction=0.2\n).astype(float)",
      "names": [
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "float"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Create-input-image",
        "headings": [
          "Convolution with Pyxu",
          "1) Prepare data",
          "Create input image"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "sigma = 2  # Gaussian kernel std\nwidth = 11  # Length of the Graussian kernel\ngauss = lambda x: (1 / (2 * np.pi * sigma**2)) * np.exp(\n    -0.5 * ((x - (width - 1) / 2) ** 2) / (sigma**2)\n)\nkernel_1d = np.fromfunction(gauss, (width,))\nkernel_2d = np.outer(kernel_1d.reshape(-1, 1), kernel_1d.reshape(1, -1))",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "exp"
          ],
          "code_str": "np.exp",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.exp"
        },
        {
          "import_components": [
            "numpy",
            "fromfunction"
          ],
          "code_str": "np.fromfunction",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.fromfunction"
        },
        {
          "import_components": [
            "numpy",
            "outer"
          ],
          "code_str": "np.outer",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.outer"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Create-blurring-kernel",
        "headings": [
          "Convolution with Pyxu",
          "1) Prepare data",
          "Create blurring kernel"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fig, axs = plt.subplots(1, 3, figsize=(15, 5))\naxs[0].imshow(data), axs[0].set_title(\"Original image\")\naxs[1].plot(kernel_1d), axs[1].set_title(\"1D Gaussian kernel\")\naxs[2].imshow(kernel_2d), axs[2].set_title(\"2D Gaussian kernel\")\nfig.tight_layout()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Create-blurring-kernel",
        "headings": [
          "Convolution with Pyxu",
          "1) Prepare data",
          "Create blurring kernel"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from scipy.signal import convolve as conv_scipy\n\n# Direct 2D convolution\ny = conv_scipy(data, kernel_2d, mode=\"same\", method=\"direct\")",
      "names": [
        {
          "import_components": [
            "scipy",
            "signal"
          ],
          "code_str": "scipy.signal",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "scipy.signal"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "convolve",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Scipy",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Scipy"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Separable convolution\n\nconvolved_rows = conv_scipy(\n    data, kernel_1d[:, np.newaxis], mode=\"same\", method=\"direct\"\n)  # Along rows\ny_separable = conv_scipy(\n    convolved_rows, kernel_1d[np.newaxis, :], mode=\"same\", method=\"direct\"\n)  # Along columns\n\nassert np.allclose(y, y_separable)",
      "names": [
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Scipy",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Scipy"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "conv = Convolve(\n    arg_shape=data.shape,\n    kernel=[kernel_1d, kernel_1d],\n    center=[width // 2, width // 2],\n    mode=\"constant\",\n    enable_warnings=True,\n)\ny_pyxu = conv(data.ravel()).reshape(data.shape)\n\nassert np.allclose(y, y_pyxu)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve"
          ],
          "code_str": "Convolve",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Pyxu",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Pyxu"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from pyxu.operator.interop import from_sciop\nimport pyxu.abc as pyca\n\nfrom pylops.signalprocessing import Convolve2D\n\n# 2d convolution\nconv_pylops = from_sciop(\n    cls=pyca.LinOp,\n    sp_op=Convolve2D(\n        dims=data.shape,\n        h=kernel_2d,\n        offset=np.r_[width // 2, width // 2],\n        axes=(0, 1),\n        method=\"direct\",\n    ),\n)\ny_pylops = conv_pylops(data.ravel()).reshape(data.shape)\nassert np.allclose(y, y_pylops)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pyxu.operator.interop.sciop.from_sciop"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pyca.LinOp",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.sciop.from_sciop"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "PyLops",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "PyLops"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Separable convolution\nconv_pylops_rows = from_sciop(\n    cls=pyca.LinOp,\n    sp_op=Convolve2D(\n        dims=data.shape,\n        h=kernel_1d[np.newaxis, :],\n        offset=np.r_[0, width // 2],\n        axes=(0, 1),\n        method=\"direct\",\n    ),\n)\nconv_pylops_cols = from_sciop(\n    cls=pyca.LinOp,\n    sp_op=Convolve2D(\n        dims=data.shape,\n        h=kernel_1d[:, np.newaxis],\n        offset=np.r_[width // 2, 0],\n        axes=(0, 1),\n        method=\"direct\",\n    ),\n)\n\ny_pylops = conv_pylops_cols(conv_pylops_rows(data.ravel())).reshape(data.shape)\nassert np.allclose(y, y_pylops)",
      "names": [
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pyca.LinOp",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.sciop.from_sciop"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pyca.LinOp",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.sciop.from_sciop"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "PyLops",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "PyLops"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "from scico.linop import Convolve as Conv_scico\nfrom jax import config\nimport jax.numpy as jnp\n\n# Convert data and kernel from Numpy to Jax\ndata_jax = jnp.asarray(data)\nk2d_jax = jnp.asarray(kernel_2d)\nconfig.update(\"jax_enable_x64\", True)\n\n# 2d convolution\nconv_scico = Conv_scico(\n    k2d_jax,\n    input_shape=data_jax.shape,\n    input_dtype=data_jax.dtype,\n    mode=\"same\",\n    jit=True,\n)\ny_scico = conv_scico(data_jax)\nassert np.allclose(y, y_scico)",
      "names": [
        {
          "import_components": [
            "jax",
            "config"
          ],
          "code_str": "config",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "jax.config"
        },
        {
          "import_components": [
            "jax",
            "numpy"
          ],
          "code_str": "jax.numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "jax.numpy"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Scico",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Scico"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "# Separable convolution\nk1d_jax = jnp.asarray(kernel_1d)\n\nconv_scico_rows = Conv_scico(\n    k1d_jax[np.newaxis, :],\n    input_shape=data_jax.shape,\n    input_dtype=data_jax.dtype,\n    mode=\"same\",\n    jit=True,\n)\nconv_scico_cols = Conv_scico(\n    k1d_jax[:, np.newaxis],\n    input_shape=data_jax.shape,\n    input_dtype=data_jax.dtype,\n    mode=\"same\",\n    jit=True,\n)\ny_scico = conv_scico_cols(conv_scico_rows(data_jax))\nassert np.allclose(y, y_scico)",
      "names": [
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "allclose"
          ],
          "code_str": "np.allclose",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.allclose"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Scico",
        "headings": [
          "Convolution with Pyxu",
          "2) Convolve image",
          "Scico"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import time\nimport tqdm\n\nnpixs = [2**i for i in range(6, 10)]\nnwidths = [2**i + 1 for i in range(3, 8)]\n\nt_pyxu = np.full((2, len(npixs), len(nwidths)), np.nan)\nt_scipy = np.full((2, len(npixs), len(nwidths)), np.nan)\nt_pylops = np.full((2, len(npixs), len(nwidths)), np.nan)\nt_scico = np.full((2, len(npixs), len(nwidths)), np.nan)\n\nsigma = 2\ngauss = lambda x: (1 / (2 * np.pi * sigma**2)) * np.exp(\n    -0.5 * ((x - (width - 1) / 2) ** 2) / (sigma**2)\n)\n\nnreps = 5\n\nwith tqdm.tqdm(total=len(npixs) * len(nwidths)) as pbar:\n    for i, npix in enumerate(npixs):\n        x = skimage.data.binary_blobs(\n            length=npix, blob_size_fraction=0.5, n_dim=2, volume_fraction=0.2\n        ).astype(float)\n        for j, width in enumerate(nwidths):\n            if npix > (width * 2):\n                kernel = np.fromfunction(gauss, (width,))\n                data_jax = jnp.asarray(data)\n                k1d_jax = jnp.asarray(kernel_1d)\n\n                ## PYXU\n\n                # Instantation + first run time\n                tic = time.perf_counter()\n                conv_pyxu = Convolve(\n                    arg_shape=data.shape,\n                    kernel=[kernel, kernel],\n                    center=[width // 2, width // 2],\n                    mode=\"constant\",\n                    enable_warnings=True,\n                )\n                y = conv_pyxu(data.ravel()).reshape(data.shape)\n                t_pyxu[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y = conv_pyxu(data.ravel()).reshape(data.shape)\n                    times += time.perf_counter() - tic\n\n                t_pyxu[1, i, j] = times / nreps\n\n                ## SCIPY\n\n                # Instantation + first run time\n                tic = time.perf_counter()\n                convolved_rows = conv_scipy(\n                    data, kernel_1d[:, np.newaxis], mode=\"same\", method=\"direct\"\n                )  # Along rows\n                y_scipy = conv_scipy(\n                    convolved_rows,\n                    kernel_1d[np.newaxis, :],\n                    mode=\"same\",\n                    method=\"direct\",\n                )  # Along columns\n\n                t_scipy[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    convolved_rows = conv_scipy(\n                        data, kernel_1d[:, np.newaxis], mode=\"same\", method=\"direct\"\n                    )  # Along rows\n                    y_scipy = conv_scipy(\n                        convolved_rows,\n                        kernel_1d[np.newaxis, :],\n                        mode=\"same\",\n                        method=\"direct\",\n                    )  # Along columns\n                    times += time.perf_counter() - tic\n\n                t_scipy[1, i, j] = times / nreps\n\n                ## PYLOPS\n\n                # Instantation + first run time\n                tic = time.perf_counter()\n                conv_pylops_rows = from_sciop(\n                    cls=pyca.LinOp,\n                    sp_op=Convolve2D(\n                        dims=data.shape,\n                        h=kernel_1d[np.newaxis, :],\n                        offset=np.r_[0, width // 2],\n                        axes=(0, 1),\n                        method=\"direct\",\n                    ),\n                )\n                conv_pylops_cols = from_sciop(\n                    cls=pyca.LinOp,\n                    sp_op=Convolve2D(\n                        dims=data.shape,\n                        h=kernel_1d[:, np.newaxis],\n                        offset=np.r_[width // 2, 0],\n                        axes=(0, 1),\n                        method=\"direct\",\n                    ),\n                )\n\n                y_pylops = conv_pylops_cols(conv_pylops_rows(data.ravel())).reshape(\n                    data.shape\n                )\n                t_pylops[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y_pylops = conv_pylops_cols(conv_pylops_rows(data.ravel())).reshape(\n                        data.shape\n                    )\n                    times += time.perf_counter() - tic\n                t_pylops[1, i, j] = times / nreps\n\n                ## SCICO\n\n                # Instantation + first run time\n\n                tic = time.perf_counter()\n                config.update(\"jax_enable_x64\", True)\n\n                conv_scico_rows = Conv_scico(\n                    k1d_jax[np.newaxis, :],\n                    input_shape=data_jax.shape,\n                    input_dtype=data_jax.dtype,\n                    mode=\"same\",\n                    jit=True,\n                )\n                conv_scico_cols = Conv_scico(\n                    k1d_jax[:, np.newaxis],\n                    input_shape=data_jax.shape,\n                    input_dtype=data_jax.dtype,\n                    mode=\"same\",\n                    jit=True,\n                )\n                y_scico = conv_scico_cols(conv_scico_rows(data_jax))\n                t_scico[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y_scico = conv_scico_cols(conv_scico_rows(data_jax))\n                    times += time.perf_counter() - tic\n                t_scico[1, i, j] = times / nreps\n            pbar.update(1)",
      "names": [
        {
          "import_components": [
            "time"
          ],
          "code_str": "time",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "time"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "exp"
          ],
          "code_str": "np.exp",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.exp"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "numpy",
            "fromfunction"
          ],
          "code_str": "np.fromfunction",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.fromfunction"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve"
          ],
          "code_str": "Convolve",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv_pyxu",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv_pyxu",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv_pyxu",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 60,
          "end_lineno": 60,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 67,
          "end_lineno": 67,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 71,
          "end_lineno": 71,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 72,
          "end_lineno": 72,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 73,
          "end_lineno": 73,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 76,
          "end_lineno": 76,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 82,
          "end_lineno": 82,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 89,
          "end_lineno": 89,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pyca.LinOp",
          "lineno": 91,
          "end_lineno": 91,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 95,
          "end_lineno": 95,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 90,
          "end_lineno": 90,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.sciop.from_sciop"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pyca.LinOp",
          "lineno": 101,
          "end_lineno": 101,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 105,
          "end_lineno": 105,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 100,
          "end_lineno": 100,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.sciop.from_sciop"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 114,
          "end_lineno": 114,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 118,
          "end_lineno": 118,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 119,
          "end_lineno": 119,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 123,
          "end_lineno": 123,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 130,
          "end_lineno": 130,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 148,
          "end_lineno": 148,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 152,
          "end_lineno": 152,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 153,
          "end_lineno": 153,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 155,
          "end_lineno": 155,
          "context": "none",
          "resolved_location": "time.perf_counter"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Separable-1d-convolution",
        "headings": [
          "Convolution with Pyxu",
          "3) Benchmark convolution runtime across all libraries",
          "Separable 1d convolution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fig, axs = plt.subplots(2, 4, figsize=(15, 5))\nim = axs[0, 0].imshow(np.log10(t_pyxu[0]))\naxs[0, 0].set_title(\"pyxu: t-init\")\nplt.colorbar(im, ax=axs[0, 0])\n\nim = axs[0, 1].imshow(np.log10(t_scipy[0]))\naxs[0, 1].set_title(\"scipy: t-init\")\nplt.colorbar(im, ax=axs[0, 1])\n\nim = axs[0, 2].imshow(np.log10(t_pylops[0]))\naxs[0, 2].set_title(\"pylops: t-init\")\nplt.colorbar(im, ax=axs[0, 2])\n\n\nim = axs[0, 3].imshow(np.log10(t_scico[0]))\naxs[0, 3].set_title(\"scico: t-init\")\nplt.colorbar(im, ax=axs[0, 3])\n\nim = axs[1, 0].imshow(np.log10(t_pyxu[1]))\naxs[1, 0].set_title(\"pyxu: t-run\")\nplt.colorbar(im, ax=axs[1, 0])\n\nim = axs[1, 1].imshow(np.log10(t_scipy[1]))\naxs[1, 1].set_title(\"scipy: t-run\")\nplt.colorbar(im, ax=axs[1, 1])\n\nim = axs[1, 2].imshow(np.log10(t_pylops[1]))\naxs[1, 2].set_title(\"pylops: t-run\")\nplt.colorbar(im, ax=axs[1, 2])\n\nim = axs[1, 3].imshow(np.log10(t_scico[1]))\naxs[1, 3].set_title(\"scico: t-run\")\nplt.colorbar(im, ax=axs[1, 3])\n\nfor ax in axs.ravel():\n    ax.set_xticks(np.arange(len(nwidths)))\n    ax.set_xticklabels(nwidths)\n    ax.set_xlabel(\"Kernel width (1D)\")\n    ax.set_yticks(np.arange(len(npixs)))\n    ax.set_yticklabels(npixs)\n    ax.set_ylabel(\"N-pixels (1D)\")\n\nfig.suptitle(\n    f\"2D convolution (time in log-scale: t-init includes JIT compilation, t-run is the mean runtime across {nreps} reps)\"\n)\nfig.tight_layout()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "numpy.arange"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Separable-1d-convolution",
        "headings": [
          "Convolution with Pyxu",
          "3) Benchmark convolution runtime across all libraries",
          "Separable 1d convolution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "import time\nimport tqdm\n\nnpixs = [2**i for i in range(6, 10)]\nnwidths = [2**i + 1 for i in range(3, 8)]\n\nt_pyxu = np.full((2, len(npixs), len(nwidths)), np.nan)\nt_scipy = np.full((2, len(npixs), len(nwidths)), np.nan)\nt_pylops = np.full((2, len(npixs), len(nwidths)), np.nan)\nt_scico = np.full((2, len(npixs), len(nwidths)), np.nan)\n\nsigma = 2\ngauss = lambda x: (1 / (2 * np.pi * sigma**2)) * np.exp(\n    -0.5 * ((x - (width - 1) / 2) ** 2) / (sigma**2)\n)\n\nnreps = 5\n\nwith tqdm.tqdm(total=len(npixs) * len(nwidths)) as pbar:\n    for i, npix in enumerate(npixs):\n        x = skimage.data.binary_blobs(\n            length=npix, blob_size_fraction=0.5, n_dim=2, volume_fraction=0.2\n        ).astype(float)\n        for j, width in enumerate(nwidths):\n            if npix > (width * 2):\n                kernel = np.fromfunction(gauss, (width,))\n                kernel_2d = np.outer(kernel.reshape(-1, 1), kernel.reshape(1, -1))\n                x_jax = jnp.asarray(x)\n                k2d_jax = jnp.asarray(kernel_2d)\n\n                ## PYXU\n\n                # Instantation + first run time\n                tic = time.perf_counter()\n                conv_pyxu = Convolve(\n                    arg_shape=x.shape,\n                    kernel=kernel_2d,\n                    center=[width // 2, width // 2],\n                    mode=\"constant\",\n                    enable_warnings=True,\n                )\n                y = conv_pyxu(x.ravel()).reshape(x.shape)\n                t_pyxu[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y = conv_pyxu(x.ravel()).reshape(x.shape)\n                    times += time.perf_counter() - tic\n\n                t_pyxu[1, i, j] = times / nreps\n\n                ## SCIPY\n\n                # Instantation + first run time\n                tic = time.perf_counter()\n                y_scipy = conv_scipy(x, kernel_2d, mode=\"same\", method=\"direct\")\n                t_scipy[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y_scipy = conv_scipy(x, kernel_2d, mode=\"same\", method=\"direct\")\n                    times += time.perf_counter() - tic\n\n                t_scipy[1, i, j] = times / nreps\n\n                ## PYLOPS\n\n                # Instantation + first run time\n                tic = time.perf_counter()\n                conv_pylops = from_sciop(\n                    cls=pyca.LinOp,\n                    sp_op=Convolve2D(\n                        dims=x.shape,\n                        h=kernel_2d,\n                        offset=np.r_[width // 2, width // 2],\n                        axes=(0, 1),\n                        method=\"direct\",\n                    ),\n                )\n\n                y_pylops = conv_pylops(x.ravel()).reshape(x.shape)\n                t_pylops[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y_pylops = conv_pylops(x.ravel()).reshape(x.shape)\n                    times += time.perf_counter() - tic\n                t_pylops[1, i, j] = times / nreps\n\n                ## SCICO\n\n                # Instantation + first run time\n\n                tic = time.perf_counter()\n                conv_scico = Conv_scico(\n                    k2d_jax,\n                    input_shape=x_jax.shape,\n                    input_dtype=x_jax.dtype,\n                    mode=\"same\",\n                    jit=True,\n                )\n                y_scico = conv_scico(x_jax)\n                t_scico[0, i, j] = time.perf_counter() - tic\n\n                # Run time\n                times = 0\n                for _ in range(nreps):\n                    tic = time.perf_counter()\n                    y_scico = conv_scico(x_jax)\n                    times += time.perf_counter() - tic\n                t_scico[1, i, j] = times / nreps\n            pbar.update(1)",
      "names": [
        {
          "import_components": [
            "time"
          ],
          "code_str": "time",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "time"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "nan"
          ],
          "code_str": "np.nan",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.nan"
        },
        {
          "import_components": [
            "numpy",
            "full"
          ],
          "code_str": "np.full",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.full"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "exp"
          ],
          "code_str": "np.exp",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.exp"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "enumerate"
          ],
          "code_str": "enumerate",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "enumerate"
        },
        {
          "import_components": [
            "numpy",
            "fromfunction"
          ],
          "code_str": "np.fromfunction",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.fromfunction"
        },
        {
          "import_components": [
            "numpy",
            "outer"
          ],
          "code_str": "np.outer",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "numpy.outer"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "jax",
            "numpy",
            "asarray"
          ],
          "code_str": "jnp.asarray",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "jax.numpy.asarray"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve"
          ],
          "code_str": "Convolve",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv_pyxu",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv_pyxu",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Convolve",
            "()"
          ],
          "code_str": "conv_pyxu",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.stencil.stencil.Convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 63,
          "end_lineno": 63,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 64,
          "end_lineno": 64,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "scipy",
            "signal",
            "convolve"
          ],
          "code_str": "conv_scipy",
          "lineno": 65,
          "end_lineno": 65,
          "context": "none",
          "resolved_location": "scipy.signal.convolve"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 66,
          "end_lineno": 66,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 73,
          "end_lineno": 73,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp"
          ],
          "code_str": "pyca.LinOp",
          "lineno": 75,
          "end_lineno": 75,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp"
        },
        {
          "import_components": [
            "numpy",
            "r_"
          ],
          "code_str": "np.r_",
          "lineno": 79,
          "end_lineno": 79,
          "context": "none",
          "resolved_location": "numpy.r_"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "interop",
            "from_sciop"
          ],
          "code_str": "from_sciop",
          "lineno": 74,
          "end_lineno": 74,
          "context": "none",
          "resolved_location": "pyxu.operator.interop.sciop.from_sciop"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 86,
          "end_lineno": 86,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 90,
          "end_lineno": 90,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 91,
          "end_lineno": 91,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 93,
          "end_lineno": 93,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 100,
          "end_lineno": 100,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 109,
          "end_lineno": 109,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 113,
          "end_lineno": 113,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 114,
          "end_lineno": 114,
          "context": "none",
          "resolved_location": "time.perf_counter"
        },
        {
          "import_components": [
            "time",
            "perf_counter"
          ],
          "code_str": "time.perf_counter",
          "lineno": 116,
          "end_lineno": 116,
          "context": "none",
          "resolved_location": "time.perf_counter"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Direct-2d-convolution",
        "headings": [
          "Convolution with Pyxu",
          "3) Benchmark convolution runtime across all libraries",
          "Direct 2d convolution"
        ]
      },
      "doc_lineno": null
    },
    {
      "source": "fig, axs = plt.subplots(2, 4, figsize=(15, 5))\n\nim = axs[0, 0].imshow(np.log10(t_pyxu[0]))\naxs[0, 0].set_title(\"pyxu: t-init\")\nplt.colorbar(im, ax=axs[0, 0])\n\nim = axs[0, 1].imshow(np.log10(t_scipy[0]))\naxs[0, 1].set_title(\"scipy: t-init\")\nplt.colorbar(im, ax=axs[0, 1])\n\nim = axs[0, 2].imshow(np.log10(t_pylops[0]))\naxs[0, 2].set_title(\"pylops: t-init\")\nplt.colorbar(im, ax=axs[0, 2])\n\n\nim = axs[0, 3].imshow(np.log10(t_scico[0]))\naxs[0, 3].set_title(\"scico: t-init\")\nplt.colorbar(im, ax=axs[0, 3])\n\nim = axs[1, 0].imshow(np.log10(t_pyxu[1]))\naxs[1, 0].set_title(\"pyxu: t-run\")\nplt.colorbar(im, ax=axs[1, 0])\n\nim = axs[1, 1].imshow(np.log10(t_scipy[1]))\naxs[1, 1].set_title(\"scipy: t-run\")\nplt.colorbar(im, ax=axs[1, 1])\n\nim = axs[1, 2].imshow(np.log10(t_pylops[1]))\naxs[1, 2].set_title(\"pylops: t-run\")\nplt.colorbar(im, ax=axs[1, 2])\n\nim = axs[1, 3].imshow(np.log10(t_scico[1]))\naxs[1, 3].set_title(\"scico: t-run\")\nplt.colorbar(im, ax=axs[1, 3])\n\nfor ax in axs.ravel():\n    ax.set_xticks(np.arange(len(nwidths)))\n    ax.set_xticklabels(nwidths)\n    ax.set_xlabel(\"Kernel width (1D)\")\n    ax.set_yticks(np.arange(len(npixs)))\n    ax.set_yticklabels(npixs)\n    ax.set_ylabel(\"N-pixels (1D)\")\n\nfig.suptitle(\n    f\"2D convolution (time in log-scale: t-init includes JIT compilation, t-run is the mean runtime across {nreps} reps)\"\n)\nfig.tight_layout()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "numpy",
            "log10"
          ],
          "code_str": "np.log10",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "numpy.log10"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "numpy.arange"
        }
      ],
      "example": {
        "document": "examples/Stencils",
        "ref_id": "Direct-2d-convolution",
        "headings": [
          "Convolution with Pyxu",
          "3) Benchmark convolution runtime across all libraries",
          "Direct 2d convolution"
        ]
      },
      "doc_lineno": null
    }
  ],
  "api/abc": [
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.abc import ProxFunc\n\nclass L1Norm(ProxFunc):\n    def __init__(self, dim: int):\n        super().__init__(shape=(1, dim))\n    def apply(self, arr):\n        return np.linalg.norm(arr, axis=-1, keepdims=True, ord=1)\n    def prox(self, arr, tau):\n        return np.clip(np.abs(arr)-tau, a_min=0, a_max=None) * np.sign(arr)\n\nN = 512\nl1_norm = L1Norm(dim=N)\nmus = [0.1, 0.5, 1]\nsmooth_l1_norms = [l1_norm.moreau_envelope(mu) for mu in mus]\n\nx = np.linspace(-1, 1, N)[:, None]\nlabels=['mu=0']\nlabels.extend([f'mu={mu}' for mu in mus])\nplt.figure()\nplt.plot(x, l1_norm(x))\nfor f in smooth_l1_norms:\n    plt.plot(x, f(x))\nplt.legend(labels)\nplt.title('Moreau Envelope')\n\nlabels=[f'mu={mu}' for mu in mus]\nplt.figure()\nfor f in smooth_l1_norms:\n    plt.plot(x, f.grad(x))\nplt.legend(labels)\nplt.title('Derivative of Moreau Envelope')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxFunc"
          ],
          "code_str": "ProxFunc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.abc.operator.ProxFunc"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "ProxFunc"
          ],
          "code_str": "ProxFunc",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.ProxFunc"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "numpy",
            "linalg",
            "norm"
          ],
          "code_str": "np.linalg.norm",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.linalg.norm"
        },
        {
          "import_components": [
            "numpy",
            "clip"
          ],
          "code_str": "np.clip",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.clip"
        },
        {
          "import_components": [
            "numpy",
            "sign"
          ],
          "code_str": "np.sign",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.sign"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "api/abc",
        "ref_id": "pyxu-abc-operator",
        "headings": [
          "pyxu.abc",
          "Table of Contents",
          "pyxu.abc.operator"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "api/experimental": [
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pyxu.experimental.sampler as pxes\nimport pyxu.operator as pxo\nimport scipy as sp\n\nf = pxo.SquaredL2Norm(dim=1) / 2  # To sample 1D normal distribution (mean 0, variance 1)\nula = pxes.ULA(f=f)  # Sampler with maximum step size\nula_lb = pxes.ULA(f=f, gamma=1e-1)  # Sampler with small step size\n\ngen_ula = ula.samples(x0=np.zeros(1))\ngen_ula_lb = ula_lb.samples(x0=np.zeros(1))\nn_burn_in = int(1e3)  # Number of burn-in iterations\nfor i in range(n_burn_in):\n    next(gen_ula)\n    next(gen_ula_lb)\n\n# Online statistics objects\nmean_ula = pxes.OnlineMoment(order=1)\nmean_ula_lb = pxes.OnlineMoment(order=1)\nvar_ula = pxes.OnlineVariance()\nvar_ula_lb = pxes.OnlineVariance()\n\nn = int(1e4)  # Number of samples\nsamples_ula = np.zeros(n)\nsamples_ula_lb = np.zeros(n)\nfor i in range(n):\n    sample = next(gen_ula)\n    sample_lb = next(gen_ula_lb)\n    samples_ula[i] = sample\n    samples_ula_lb[i] = sample_lb\n    mean = float(mean_ula.update(sample))\n    var = float(var_ula.update(sample))\n    mean_lb = float(mean_ula_lb.update(sample_lb))\n    var_lb = float(var_ula_lb.update(sample_lb))\n\n# Theoretical variances of biased stationary distributions of ULA\nbiased_var = 1 / (1 - ula._gamma / 2)\nbiased_var_lb = 1 / (1 - ula_lb._gamma / 2)\n\n# Quantify goodness of fit of empirical distribution with theoretical distribution (Cram\u00e9r-von Mises test)\ncvm = sp.stats.cramervonmises(samples_ula, \"norm\", args=(0, np.sqrt(biased_var)))\ncvm_lb = sp.stats.cramervonmises(samples_ula_lb, \"norm\", args=(0, np.sqrt(biased_var_lb)))\n\n# Plots\ngrid = np.linspace(-4, 4, 1000)\n\nplt.figure()\nplt.title(\n    f\"ULA samples (large step size) \\n Empirical mean: {mean:.3f} (theoretical: 0) \\n \"\n    f\"Empirical variance: {var:.3f} (theoretical: {biased_var:.3f}) \\n\"\n    f\"Cram\u00e9r-von Mises goodness of fit: {cvm.statistic:.3f}\"\n)\nplt.hist(samples_ula, range=(min(grid), max(grid)), bins=100, density=True)\nplt.plot(grid, sp.stats.norm.pdf(grid), label=r\"$p(x)$\")\nplt.plot(grid, sp.stats.norm.pdf(grid, scale=np.sqrt(biased_var)), label=r\"$p_{\\gamma_1}(x)$\")\nplt.legend()\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler"
          ],
          "code_str": "pyxu.experimental.sampler",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.experimental.sampler"
        },
        {
          "import_components": [
            "scipy"
          ],
          "code_str": "scipy",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "pxo.SquaredL2Norm",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA"
          ],
          "code_str": "pxes.ULA",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler._sampler.ULA"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()"
          ],
          "code_str": "ula",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler._sampler.ULA"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA"
          ],
          "code_str": "pxes.ULA",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler._sampler.ULA"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()"
          ],
          "code_str": "ula_lb",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler._sampler.ULA"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula_lb",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "next"
          ],
          "code_str": "next",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "next"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula_lb",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "next"
          ],
          "code_str": "next",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "next"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineMoment"
          ],
          "code_str": "pxes.OnlineMoment",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.statistics.OnlineMoment"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineMoment",
            "()"
          ],
          "code_str": "mean_ula",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.statistics.OnlineMoment"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineMoment"
          ],
          "code_str": "pxes.OnlineMoment",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.statistics.OnlineMoment"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineMoment",
            "()"
          ],
          "code_str": "mean_ula_lb",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.statistics.OnlineMoment"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineVariance"
          ],
          "code_str": "pxes.OnlineVariance",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.OnlineVariance"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "OnlineVariance"
          ],
          "code_str": "pxes.OnlineVariance",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "pyxu.experimental.sampler.OnlineVariance"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "next"
          ],
          "code_str": "next",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "next"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "sampler",
            "ULA",
            "()",
            "samples",
            "()"
          ],
          "code_str": "gen_ula_lb",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "collections.abc.Generator"
        },
        {
          "import_components": [
            "next"
          ],
          "code_str": "next",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "next"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "float"
          ],
          "code_str": "float",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "float"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "scipy",
            "stats",
            "cramervonmises"
          ],
          "code_str": "sp.stats.cramervonmises",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "scipy.stats.cramervonmises"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "scipy",
            "stats",
            "cramervonmises"
          ],
          "code_str": "sp.stats.cramervonmises",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "scipy.stats.cramervonmises"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 46,
          "end_lineno": 46,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "min"
          ],
          "code_str": "min",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "min"
        },
        {
          "import_components": [
            "max"
          ],
          "code_str": "max",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "hist"
          ],
          "code_str": "plt.hist",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.hist"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/experimental",
        "ref_id": "remarks",
        "headings": [
          "pyxu.experimental",
          "Remarks"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "plt.figure()\nplt.title(\n    f\"ULA samples (small step size) \\n Empirical mean: {mean_lb:.3f} (theoretical: 0) \\n \"\n    f\"Empirical variance: {var_lb:.3f} (theoretical: {biased_var_lb:.3f}) \\n\"\n    f\"Cram\u00e9r-von Mises goodness of fit: {cvm_lb.statistic:.3f}\"\n)\nplt.hist(samples_ula_lb, range=(min(grid), max(grid)), bins=100, density=True)\nplt.plot(grid, sp.stats.norm.pdf(grid), label=r\"$p(x)$\")\nplt.plot(grid, sp.stats.norm.pdf(grid, scale=np.sqrt(biased_var_lb)), label=r\"$p_{\\gamma_2}(x)$\")\nplt.legend()\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "min"
          ],
          "code_str": "min",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "min"
        },
        {
          "import_components": [
            "max"
          ],
          "code_str": "max",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "max"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "hist"
          ],
          "code_str": "plt.hist",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.hist"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/experimental",
        "ref_id": "remarks",
        "headings": [
          "pyxu.experimental",
          "Remarks"
        ]
      },
      "doc_lineno": 89
    }
  ],
  "api/index": [],
  "api/info": [],
  "api/operator/interop": [],
  "api/operator/linop": [
    {
      "source": "import numpy as np\nimport pyxu.operator as pxo\nimport matplotlib.pyplot as plt\n\nrng = np.random.default_rng(0)\nD, M, N = 1, 2, 3  # D denotes the dimension of the data\nx = np.fmod(rng.normal(size=(M, D)), 2 * np.pi)\nA = pxo.NUFFT.type1(\n    x, N,\n    isign=-1,\n    eps=1e-9\n)\nA.plot_kernel()\nplt.show()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "fmod"
          ],
          "code_str": "np.fmod",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.fmod"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "NUFFT",
            "type1"
          ],
          "code_str": "pxo.NUFFT.type1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.fft.nufft.NUFFT.type1"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "transforms",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Hint"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport pyxu.operator as pxo\n\nrng = np.random.default_rng(2)\nD, M, N = 2, 500, 200\nrnd_points = lambda _: rng.normal(scale=rng.uniform(0.25, 0.5, size=(D,)), size=(_, D))\nrnd_offset = lambda: rng.uniform(-1, 1, size=(D,))\nscale = 20\nx = np.concatenate(\n    [\n        rnd_points(M) + rnd_offset() * scale,\n        rnd_points(M) + rnd_offset() * scale,\n        rnd_points(M) + rnd_offset() * scale,\n        rnd_points(M) + rnd_offset() * scale,\n        rnd_points(M) + rnd_offset() * scale,\n    ],\n    axis=0,\n)\nz = np.concatenate(\n    [\n        rnd_points(N) + rnd_offset() * scale,\n        rnd_points(N) + rnd_offset() * scale,\n        rnd_points(N) + rnd_offset() * scale,\n        rnd_points(N) + rnd_offset() * scale,\n        rnd_points(N) + rnd_offset() * scale,\n    ],\n    axis=0,\n)\n\nkwargs = dict(\n    x=x,\n    z=z,\n    isign=-1,\n    eps=1e-3,\n)\nA = pxo.NUFFT.type3(**kwargs, chunked=True)\nx_chunks, z_chunks = A.auto_chunk(\n    max_mem=.1,\n    max_anisotropy=1,\n)\nA.allocate(x_chunks, z_chunks)\nfig = A.diagnostic_plot('x')\nfig.show()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "numpy",
            "concatenate"
          ],
          "code_str": "np.concatenate",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.concatenate"
        },
        {
          "import_components": [
            "numpy",
            "concatenate"
          ],
          "code_str": "np.concatenate",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.concatenate"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "dict"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "NUFFT",
            "type3"
          ],
          "code_str": "pxo.NUFFT.type3",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.fft.nufft.NUFFT.type3"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "transforms",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Hint"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import PartialDerivative\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\narg_shape = image.shape  # Shape of our image\n# Specify derivative order at each direction\ndf_dx = (1, 0)  # Compute derivative of order 1 in first dimension\nd2f_dy2 = (0, 2)  # Compute derivative of order 2 in second dimension\nd3f_dxdy2 = (1, 2)  # Compute derivative of order 1 in first dimension and der. of order 2 in second dimension\n# Instantiate derivative operators\nsigma = 2.0\ndiff1 = PartialDerivative.gaussian_derivative(order=df_dx, arg_shape=arg_shape, sigma=sigma / np.sqrt(2))\ndiff2 = PartialDerivative.gaussian_derivative(order=d2f_dy2, arg_shape=arg_shape, sigma=sigma / np.sqrt(2))\ndiff = PartialDerivative.gaussian_derivative(order=d3f_dxdy2, arg_shape=arg_shape, sigma=sigma)\n# Compute derivatives\nout1 = (diff1 * diff2)(image.ravel()).reshape(arg_shape)\nout2 = diff(image.ravel()).reshape(arg_shape)\n# Plot derivatives\nfig, axs = plt.subplots(1, 3, figsize=(15, 4))\nim = axs[0].imshow(image)\naxs[0].axis(\"off\")\naxs[0].set_title(\"f(x,y)\")\nplt.colorbar(im, ax=axs[0])\naxs[1].imshow(out1)\naxs[1].axis(\"off\")\naxs[1].set_title(r\"$\\frac{\\partial^{3} f(x,y)}{\\partial x\\partial y^{2}}$\")\nplt.colorbar(im, ax=axs[1])\n\naxs[2].imshow(out2)\naxs[2].axis(\"off\")\naxs[2].set_title(r\"$\\frac{\\partial^{3} f(x,y)}{\\partial x\\partial y^{2}}$\")\nplt.colorbar(im, ax=axs[2])\n\n# Test approximation error\nplt.figure()\nplt.imshow(abs(out1 - out2) / abs(out2)), plt.colorbar()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative",
            "gaussian_derivative"
          ],
          "code_str": "PartialDerivative.gaussian_derivative",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative.gaussian_derivative"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative",
            "gaussian_derivative"
          ],
          "code_str": "PartialDerivative.gaussian_derivative",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative.gaussian_derivative"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative",
            "gaussian_derivative"
          ],
          "code_str": "PartialDerivative.gaussian_derivative",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative.gaussian_derivative"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "abs"
          ],
          "code_str": "abs",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "abs"
        },
        {
          "import_components": [
            "abs"
          ],
          "code_str": "abs",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "abs"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 40,
          "end_lineno": 40,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import PartialDerivative\nfrom pyxu.util.misc import peaks\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\narg_shape = image.shape  # Shape of our image\n# Specify derivative order at each direction\ndf_dx = (1, 0) # Compute derivative of order 1 in first dimension\nd2f_dy2 = (0, 2) # Compute derivative of order 2 in second dimension\nd3f_dxdy2 = (1, 2) # Compute derivative of order 1 in first dimension and der. of order 2 in second dimension\n# Instantiate derivative operators\ndiff1 = PartialDerivative.gaussian_derivative(order=df_dx, arg_shape=arg_shape, sigma=2.0)\ndiff2 = PartialDerivative.gaussian_derivative(order=d2f_dy2, arg_shape=arg_shape, sigma=2.0)\ndiff = PartialDerivative.gaussian_derivative(order=d3f_dxdy2, arg_shape=arg_shape, sigma=2.0)\n# Compute derivatives\nout1 = (diff1 * diff2)(image.ravel()).reshape(arg_shape)\nout2 = diff(image.ravel()).reshape(arg_shape)\nplt.figure()\nplt.imshow(image),\nplt.axis('off')\nplt.colorbar()\nplt.title('f(x,y)')\nplt.figure()\nplt.imshow(out1.T)\nplt.axis('off')\nplt.title(r'$\\frac{\\partial^{3} f(x,y)}{\\partial x\\partial y^{2}}$')\nplt.figure()\nplt.imshow(out2.T)\nplt.axis('off')\nplt.title(r'$\\frac{\\partial^{3} f(x,y)}{\\partial x\\partial y^{2}}$')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative",
            "gaussian_derivative"
          ],
          "code_str": "PartialDerivative.gaussian_derivative",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative.gaussian_derivative"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative",
            "gaussian_derivative"
          ],
          "code_str": "PartialDerivative.gaussian_derivative",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative.gaussian_derivative"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative",
            "gaussian_derivative"
          ],
          "code_str": "PartialDerivative.gaussian_derivative",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative.gaussian_derivative"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "axis"
          ],
          "code_str": "plt.axis",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.axis"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Gradient\nfrom pyxu.util.misc import peaks\n\n# Define input image\nn = 100\nx = np.linspace(-3, 3, n)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\narg_shape = image.shape  # (1000, 1000)\n# Instantiate gradient operator\ngrad = Gradient(arg_shape=arg_shape)\n\n# Compute gradients\noutput = grad(image.ravel()) # shape = (2000000, )\ndf_dx, df_dy = grad.unravel(output) # shape = (2, 1000, 1000)\n\n# Plot image\nfig, axs = plt.subplots(1, 3, figsize=(15, 4))\nim = axs[0].imshow(image)\naxs[0].set_title(\"Image\")\naxs[0].axis(\"off\")\nplt.colorbar(im, ax=axs[0])\n\n# Plot gradient\nim = axs[1].imshow(df_dx)\naxs[1].set_title(r\"$\\partial f/ \\partial x$\")\naxs[1].axis(\"off\")\nplt.colorbar(im, ax=axs[1])\nim = axs[2].imshow(df_dy)\naxs[2].set_title(r\"$\\partial f/ \\partial y$\")\naxs[2].axis(\"off\")\nplt.colorbar(im, ax=axs[2])",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Gradient"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Jacobian\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nimage = np.tile(peaks(xx, yy), (3, 1, 1))\njac = Jacobian(arg_shape=image.shape[1:], n_channels=image.shape[0])\nout = jac.unravel(jac(image.ravel()))\nfig, axes = plt.subplots(3, 2, figsize=(10, 15))\nfor i in range(3):\n    for j in range(2):\n        axes[i, j].imshow(out[i, j].T, cmap=[\"Reds\", \"Greens\", \"Blues\"][j])\n        axes[i, j].set_title(f\"$\\partial I_{{{['R', 'G', 'B'][j]}}}/\\partial{{{['x', 'y'][j]}}}$\")\nplt.suptitle(\"Jacobian\")",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Jacobian"
          ],
          "code_str": "Jacobian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Jacobian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "tile"
          ],
          "code_str": "np.tile",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.tile"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Jacobian"
          ],
          "code_str": "Jacobian",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Jacobian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "suptitle"
          ],
          "code_str": "plt.suptitle",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.suptitle"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Gradient, Divergence, Laplacian\nfrom pyxu.util.misc import peaks\n\nn = 100\nx = np.linspace(-3, 3, n)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\narg_shape = image.shape  # (1000, 1000)\ngrad = Gradient(arg_shape=arg_shape)\ndiv = Divergence(arg_shape=arg_shape)\n# Construct Laplacian via composition\nlaplacian1 = div * grad\n# Compare to default Laplacian\nlaplacian2 = Laplacian(arg_shape=arg_shape)\noutput1 = laplacian1(image.ravel())\noutput2 = laplacian2(image.ravel())\nfig, axes = plt.subplots(1, 2, figsize=(10, 5))\nim = axes[0].imshow(np.log(abs(output1)).reshape(*arg_shape))\naxes[0].set_title(\"Laplacian via composition\")\nplt.colorbar(im, ax=axes[0])\nim = axes[1].imshow(np.log(abs(output1)).reshape(*arg_shape))\naxes[1].set_title(\"Default Laplacian\")\nplt.colorbar(im, ax=axes[1])",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Divergence"
          ],
          "code_str": "Divergence",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Divergence"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplacian"
          ],
          "code_str": "Laplacian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Laplacian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gradient"
          ],
          "code_str": "Gradient",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Gradient"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Divergence"
          ],
          "code_str": "Divergence",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Divergence"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplacian"
          ],
          "code_str": "Laplacian",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Laplacian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "abs"
          ],
          "code_str": "abs",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "abs"
        },
        {
          "import_components": [
            "numpy",
            "log"
          ],
          "code_str": "np.log",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.log"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "abs"
          ],
          "code_str": "abs",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "abs"
        },
        {
          "import_components": [
            "numpy",
            "log"
          ],
          "code_str": "np.log",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "numpy.log"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Hessian, PartialDerivative\nfrom pyxu.util.misc import peaks\n\nn = 100\nx = np.linspace(-3, 3, n)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\narg_shape = image.shape  # (1000, 1000)\n\n# Instantiate Hessian operator\nhessian = Hessian(arg_shape=arg_shape, directions=\"all\")\n# Compute Hessian\noutput = hessian(image.ravel()) # shape = (300000,)\nd2f_dx2, d2f_dxdy, d2f_dy2 = hessian.unravel(output)\n\n# Plot\nfig, axs = plt.subplots(1, 4, figsize=(20, 4))\nim = axs[0].imshow(image)\nplt.colorbar(im, ax=axs[0])\naxs[0].set_title(\"Image\")\naxs[0].axis(\"off\")\n\nim = axs[1].imshow(d2f_dx2)\nplt.colorbar(im, ax=axs[1])\naxs[1].set_title(r\"$\\partial^{2} f/ \\partial x^{2}$\")\naxs[1].axis(\"off\")\n\nim = axs[2].imshow(d2f_dxdy)\nplt.colorbar(im, ax=axs[2])\naxs[2].set_title(r\"$\\partial^{2} f/ \\partial x\\partial y$\")\naxs[2].axis(\"off\")\n\nim = axs[3].imshow(d2f_dy2)\nplt.colorbar(im, ax=axs[3])\naxs[3].set_title(r\"$\\partial^{2} f/ \\partial y^{2}$\")\naxs[3].axis(\"off\")",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Hessian"
          ],
          "code_str": "Hessian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Hessian"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "PartialDerivative"
          ],
          "code_str": "PartialDerivative",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.PartialDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Hessian"
          ],
          "code_str": "Hessian",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Hessian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import Laplacian\nfrom pyxu.util.misc import peaks\n\n# Define input image\nn = 100\nx = np.linspace(-3, 3, n)\nxx, yy = np.meshgrid(x, x)\nimage = peaks(xx, yy)\n\narg_shape = image.shape  # (1000, 1000)\n# Compute Laplacian\nlaplacian = Laplacian(arg_shape=arg_shape)\noutput = laplacian(image.ravel())\noutput = laplacian.unravel(output) # shape = (1, 1000, 1000)\n# Plot\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\nim = axs[0].imshow(image)\nplt.colorbar(im, ax=axs[0])\naxs[0].set_title(\"Image\")\naxs[0].axis(\"off\")\n\nim = axs[1].imshow(output.squeeze())\nplt.colorbar(im, ax=axs[1])\naxs[1].set_title(r\"$\\partial^{2} f/ \\partial x^{2}+\\partial^{2} f/ \\partial y^{2}$\")\naxs[1].axis(\"off\")\n\nfig.show()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplacian"
          ],
          "code_str": "Laplacian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.Laplacian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplacian"
          ],
          "code_str": "Laplacian",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.Laplacian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import DirectionalDerivative\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\ndirections = np.zeros(shape=(2, z.size))\ndirections[0, : z.size // 2] = 1\ndirections[1, z.size // 2:] = 1\ndop = DirectionalDerivative(arg_shape=z.shape, order=1, directions=directions)\nout = dop.unravel(dop(z.ravel()))\ndop2 = DirectionalDerivative(arg_shape=z.shape, order=2, directions=directions)\nout2 = dop2.unravel(dop2(z.ravel()))\nfig, axs = plt.subplots(1, 3, figsize=(15, 5))\naxs = np.ravel(axs)\nh = axs[0].pcolormesh(xx, yy, z, shading=\"auto\")\naxs[0].quiver(x, x, directions[1].reshape(xx.shape), directions[0].reshape(xx.shape))\nplt.colorbar(h, ax=axs[0])\naxs[0].set_title(\"Signal and directions of first derivatives\")\n\nh = axs[1].pcolormesh(xx, yy, out.squeeze(), shading=\"auto\")\nplt.colorbar(h, ax=axs[1])\naxs[1].set_title(\"First-order directional derivatives\")\n\nh = axs[2].pcolormesh(xx, yy, out2.squeeze(), shading=\"auto\")\nplt.colorbar(h, ax=axs[2])\naxs[2].set_title(\"Second-order directional derivative\")",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalDerivative"
          ],
          "code_str": "DirectionalDerivative",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.DirectionalDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalDerivative"
          ],
          "code_str": "DirectionalDerivative",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.DirectionalDerivative"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalDerivative"
          ],
          "code_str": "DirectionalDerivative",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.DirectionalDerivative"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "numpy",
            "ravel"
          ],
          "code_str": "np.ravel",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.ravel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import DirectionalGradient\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\ndirections1 = np.zeros(shape=(2, z.size))\ndirections1[0, :z.size // 2] = 1\ndirections1[1, z.size // 2:] = 1\ndirections2 = np.zeros(shape=(2, z.size))\ndirections2[1, :z.size // 2] = -1\ndirections2[0, z.size // 2:] = -1\narg_shape = z.shape\ndop = DirectionalGradient(arg_shape=arg_shape, directions=[directions1, directions2])\nout = dop.unravel(dop(z.ravel()))\nplt.figure()\nh = plt.pcolormesh(xx, yy, z, shading='auto')\nplt.quiver(x, x, directions1[1].reshape(arg_shape), directions1[0].reshape(xx.shape))\nplt.quiver(x, x, directions2[1].reshape(arg_shape), directions2[0].reshape(xx.shape), color='red')\nplt.colorbar(h)\nplt.title(r'Signal $\\mathbf{f}$ and directions of derivatives')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[0], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla_{\\mathbf{v}_0} \\mathbf{f}$')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[1], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla_{\\mathbf{v}_1} \\mathbf{f}$')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalGradient"
          ],
          "code_str": "DirectionalGradient",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.DirectionalGradient"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalGradient"
          ],
          "code_str": "DirectionalGradient",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.DirectionalGradient"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import DirectionalLaplacian\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\ndirections1 = np.zeros(shape=(2, z.size))\ndirections1[0, :z.size // 2] = 1\ndirections1[1, z.size // 2:] = 1\ndirections2 = np.zeros(shape=(2, z.size))\ndirections2[1, :z.size // 2] = -1\ndirections2[0, z.size // 2:] = -1\narg_shape = z.shape\ndop = DirectionalLaplacian(arg_shape=arg_shape, directions=[directions1, directions2])\nout = dop.unravel(dop(z.ravel()))\nplt.figure()\nh = plt.pcolormesh(xx, yy, z, shading='auto')\nplt.quiver(x, x, directions1[1].reshape(arg_shape), directions1[0].reshape(xx.shape))\nplt.quiver(x, x, directions2[1].reshape(arg_shape), directions2[0].reshape(xx.shape), color='red')\nplt.colorbar(h)\nplt.title('Signal and directions of derivatives')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out.squeeze(), shading='auto')\nplt.colorbar(h)\nplt.title('Directional Laplacian')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalLaplacian"
          ],
          "code_str": "DirectionalLaplacian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.DirectionalLaplacian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalLaplacian"
          ],
          "code_str": "DirectionalLaplacian",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.DirectionalLaplacian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyxu.operator import DirectionalHessian\nfrom pyxu.util.misc import peaks\n\nx = np.linspace(-2.5, 2.5, 25)\nxx, yy = np.meshgrid(x, x)\nz = peaks(xx, yy)\ndirections1 = np.zeros(shape=(2, z.size))\ndirections1[0, :z.size // 2] = 1\ndirections1[1, z.size // 2:] = 1\ndirections2 = np.zeros(shape=(2, z.size))\ndirections2[1, :z.size // 2] = -1\ndirections2[0, z.size // 2:] = -1\narg_shape = z.shape\nd_hess = DirectionalHessian(arg_shape=arg_shape, directions=[directions1, directions2])\nout = d_hess.unravel(d_hess(z.ravel()))\nplt.figure()\nh = plt.pcolormesh(xx, yy, z, shading='auto')\nplt.quiver(x, x, directions1[1].reshape(arg_shape), directions1[0].reshape(xx.shape))\nplt.quiver(x, x, directions2[1].reshape(arg_shape), directions2[0].reshape(xx.shape), color='red')\nplt.colorbar(h)\nplt.title(r'Signal $\\mathbf{f}$ and directions of derivatives')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[0], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla^2_{\\mathbf{v}_0} \\mathbf{f}$')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[1], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla_{\\mathbf{v}_0} \\nabla_{\\mathbf{v}_{1}} \\mathbf{f}$')\nplt.figure()\nh = plt.pcolormesh(xx, yy, out[2], shading='auto')\nplt.colorbar(h)\nplt.title(r'$\\nabla^2_{\\mathbf{v}_1} \\mathbf{f}$')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalHessian"
          ],
          "code_str": "DirectionalHessian",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.diff.DirectionalHessian"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc"
          ],
          "code_str": "pyxu.util.misc",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "pyxu.util.misc"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "meshgrid"
          ],
          "code_str": "np.meshgrid",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.meshgrid"
        },
        {
          "import_components": [
            "pyxu",
            "util",
            "misc",
            "peaks"
          ],
          "code_str": "peaks",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.util.misc.peaks"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DirectionalHessian"
          ],
          "code_str": "DirectionalHessian",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.diff.DirectionalHessian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "quiver"
          ],
          "code_str": "plt.quiver",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.quiver"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "pcolormesh"
          ],
          "code_str": "plt.pcolormesh",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.pcolormesh"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "derivatives",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Remark"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nfrom pyxu.operator import MovingAverage\n\narg_shape = (11, 11)\nimage = np.zeros(arg_shape)\nimage[5, 5] = 1.\n\nma = MovingAverage(arg_shape, size=5)\nout = ma(image.ravel())\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out.reshape(*arg_shape))\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "MovingAverage"
          ],
          "code_str": "MovingAverage",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.filter.MovingAverage"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "MovingAverage"
          ],
          "code_str": "MovingAverage",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.MovingAverage"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nfrom pyxu.operator import Gaussian\n\narg_shape = (11, 11)\nimage = np.zeros(arg_shape)\nimage[5, 5] = 1.\n\ngaussian = Gaussian(arg_shape, sigma=3)\nout = gaussian(image.ravel())\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out.reshape(*arg_shape))\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gaussian"
          ],
          "code_str": "Gaussian",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.filter.Gaussian"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Gaussian"
          ],
          "code_str": "Gaussian",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.Gaussian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nfrom pyxu.operator import DoG\n\narg_shape = (11, 11)\nimage = np.zeros(arg_shape)\nimage[5, 5] = 1.\n\ndog = DoG(arg_shape, low_sigma=3)\nout = dog(image.ravel())\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out.reshape(*arg_shape))\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DoG"
          ],
          "code_str": "DoG",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.filter.DifferenceOfGaussians"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DoG"
          ],
          "code_str": "DoG",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.DifferenceOfGaussians"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nfrom pyxu.operator import DoG\n\narg_shape = (11, 11)\nimage = np.zeros(arg_shape)\nimage[5, 5] = 1.\n\ndog = DoG(arg_shape, low_sigma=3)\nout = dog(image.ravel())\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out.reshape(*arg_shape))\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DoG"
          ],
          "code_str": "DoG",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.filter.DifferenceOfGaussians"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "DoG"
          ],
          "code_str": "DoG",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.DifferenceOfGaussians"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nfrom pyxu.operator import Laplace\n\narg_shape = (11, 11)\nimage = np.zeros(arg_shape)\nimage[5, 5] = 1.\n\nlaplace = Laplace(arg_shape)\nout = laplace(image.ravel())\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out.reshape(*arg_shape))\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplace"
          ],
          "code_str": "Laplace",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.filter.Laplace"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Laplace"
          ],
          "code_str": "Laplace",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.Laplace"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nfrom pyxu.operator import Sobel\n\narg_shape = (11, 11)\nimage = np.zeros(arg_shape)\nimage[5, 5] = 1.\n\nsobel = Sobel(arg_shape)\nout = sobel(image.ravel())\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out.reshape(*arg_shape))\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Sobel"
          ],
          "code_str": "Sobel",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.filter.Sobel"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Sobel"
          ],
          "code_str": "Sobel",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.Sobel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nfrom pyxu.operator import Prewitt\n\narg_shape = (11, 11)\nimage = np.zeros(arg_shape)\nimage[5, 5] = 1.\n\nprewitt = Prewitt(arg_shape)\nout = prewitt(image.ravel())\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out.reshape(*arg_shape))\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Prewitt"
          ],
          "code_str": "Prewitt",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.filter.Prewitt"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Prewitt"
          ],
          "code_str": "Prewitt",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.Prewitt"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Filters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nfrom pyxu.operator import Scharr\n\narg_shape = (11, 11)\nimage = np.zeros(arg_shape)\nimage[5, 5] = 1.\n\nscharr = Scharr(arg_shape)\nout = scharr(image.ravel())\nplt.figure(figsize=(10, 5))\nplt.subplot(121)\nplt.imshow(image)\nplt.colorbar()\nplt.subplot(122)\nplt.imshow(out.reshape(*arg_shape))\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Scharr"
          ],
          "code_str": "Scharr",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pyxu.operator.linop.filter.Scharr"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "Scharr"
          ],
          "code_str": "Scharr",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "pyxu.operator.linop.filter.Scharr"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplot"
          ],
          "code_str": "plt.subplot",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "api/operator/linop",
        "ref_id": "filters",
        "headings": [
          "pyxu.operator.linop",
          "Table of Contents",
          "Transforms",
          "Hint",
          "Hint",
          "Derivatives",
          "Filters"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "api/operator/map": [],
  "api/opt": [
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pyxu.operator as pxo\nfrom pyxu.experimental._dev import DownSampling, FirstDerivative\nfrom pyxu.opt.solver import CV\n\nx = np.repeat(np.asarray([0, 2, 1, 3, 0, 2, 0]), 10)\nN = x.size\n\nD = FirstDerivative(size=N, kind=\"forward\")\nD.lipschitz = D.estimate_lipschitz()\n\ndownsample = DownSampling(size=N, downsampling_factor=3)\ny = downsample(x)\nloss = (1 / 2) * pxo.SquaredL2Norm(y.size).argshift(-y)\nF = loss * downsample\nF.diff_lipschitz = F.estimate_diff_lipschitz()\n\ncv = CV(f=F, g=0.01 * pxo.L1Norm(N), h=0.1 * pxo.L1Norm(N), K=D)\nx0, z0 = np.zeros((2, N))\ncv.fit(x0=x0, z0=z0)\nx_recons = cv.solution()[0]\n\nplt.figure()\nplt.stem(x, linefmt=\"C0-\", markerfmt=\"C0o\")\nmask_ids = np.where(downsample.downsampling_mask)[0]\nmarkerline, stemlines, baseline = plt.stem(mask_ids, y, linefmt=\"C3-\", markerfmt=\"C3o\")\nmarkerline.set_markerfacecolor(\"none\")\nplt.stem(x_recons, linefmt=\"C1--\", markerfmt=\"C1s\")\nplt.legend([\"Ground truth\", \"Observation\", \"CV Estimate\"])\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "CV"
          ],
          "code_str": "CV",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pds.CondatVu"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "repeat"
          ],
          "code_str": "np.repeat",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.repeat"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "_dev",
            "FirstDerivative",
            "()",
            "estimate_lipschitz"
          ],
          "code_str": "D.estimate_lipschitz",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp.estimate_lipschitz"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "_dev",
            "FirstDerivative",
            "()",
            "lipschitz"
          ],
          "code_str": "D.lipschitz",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.Map.lipschitz"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "pxo.SquaredL2Norm",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm",
            "()",
            "argshift"
          ],
          "code_str": "argshift",
          "lineno": 15,
          "end_lineno": 15,
          "context": "after_call",
          "resolved_location": "pyxu.abc.operator.Operator.argshift"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "CV"
          ],
          "code_str": "CV",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.CondatVu"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "CV",
            "()"
          ],
          "code_str": "cv",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.CondatVu"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "CV",
            "()",
            "fit"
          ],
          "code_str": "cv.fit",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.fit"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "CV",
            "()",
            "solution"
          ],
          "code_str": "cv.solution",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.solution"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "numpy",
            "where"
          ],
          "code_str": "np.where",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.where"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/opt",
        "ref_id": "id18",
        "headings": [
          "pyxu.opt",
          "Table of Contents",
          "pyxu.opt.solver",
          "Parameters (fit())"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pyxu.operator as pxo\nfrom pyxu.experimental._dev import DownSampling, FirstDerivative\nfrom pyxu.opt.solver import PD3O\n\nx = np.repeat(np.asarray([0, 2, 1, 3, 0, 2, 0]), 10)\nN = x.size\n\nD = FirstDerivative(size=N, kind=\"forward\")\nD.lipschitz = D.estimate_lipschitz()\n\ndownsample = DownSampling(size=N, downsampling_factor=3)\ny = downsample(x)\nloss = (1 / 2) * pxo.SquaredL2Norm(y.size).argshift(-y)\nF = loss * downsample\nF.diff_lipschitz = F.estimate_diff_lipschitz()\n\npd3o = PD3O(f=F, g=0.01 * pxo.L1Norm(N), h=0.1 * pxo.L1Norm(N), K=D)\nx0, z0 = np.zeros((2, N))\npd3o.fit(x0=x0, z0=z0)\nx_recons = pd3o.solution()[0]\n\nplt.figure()\nplt.stem(x, linefmt=\"C0-\", markerfmt=\"C0o\")\nmask_ids = np.where(downsample.downsampling_mask)[0]\nmarkerline, stemlines, baseline = plt.stem(mask_ids, y, linefmt=\"C3-\", markerfmt=\"C3o\")\nmarkerline.set_markerfacecolor(\"none\")\nplt.stem(x_recons, linefmt=\"C1--\", markerfmt=\"C1s\")\nplt.legend([\"Ground truth\", \"Observation\", \"PD3O Estimate\"])\nplt.show()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O"
          ],
          "code_str": "PD3O",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "numpy",
            "asarray"
          ],
          "code_str": "np.asarray",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.asarray"
        },
        {
          "import_components": [
            "numpy",
            "repeat"
          ],
          "code_str": "np.repeat",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.repeat"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "_dev",
            "FirstDerivative",
            "()",
            "estimate_lipschitz"
          ],
          "code_str": "D.estimate_lipschitz",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp.estimate_lipschitz"
        },
        {
          "import_components": [
            "pyxu",
            "experimental",
            "_dev",
            "FirstDerivative",
            "()",
            "lipschitz"
          ],
          "code_str": "D.lipschitz",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.Map.lipschitz"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "pxo.SquaredL2Norm",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm",
            "()",
            "argshift"
          ],
          "code_str": "argshift",
          "lineno": 15,
          "end_lineno": 15,
          "context": "after_call",
          "resolved_location": "pyxu.abc.operator.Operator.argshift"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O"
          ],
          "code_str": "PD3O",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O",
            "()"
          ],
          "code_str": "pd3o",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.PD3O"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O",
            "()",
            "fit"
          ],
          "code_str": "pd3o.fit",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.fit"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "PD3O",
            "()",
            "solution"
          ],
          "code_str": "pd3o.solution",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.solution"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "numpy",
            "where"
          ],
          "code_str": "np.where",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "numpy.where"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "stem"
          ],
          "code_str": "plt.stem",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.stem"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/opt",
        "ref_id": "id26",
        "headings": [
          "pyxu.opt",
          "Table of Contents",
          "pyxu.opt.solver",
          "Parameters (fit())"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pyxu.abc as pxa\nimport pyxu.operator as pxo\nimport scipy as sp\nfrom pyxu.opt.solver import ADMM\n\nN = 100  # Dimension of the problem\n\n# Generate piecewise-linear ground truth\nx_gt = np.array([10, 25, 60, 90])  # Knot locations\na_gt = np.array([2, -4, 3, -2])  # Amplitudes of the knots\ngt = np.zeros(N)  # Ground-truth signal\nfor n in range(len(x_gt)):\n    gt[x_gt[n] :] += a_gt[n] * np.arange(N - x_gt[n]) / N\n\n# Generate data (noisy samples at random locations)\nM = 20  # Number of data points\nrng = np.random.default_rng(seed=0)\nx_samp = rng.choice(np.arange(N // M), size=M) + np.arange(N, step=N // M)  # sampling locations\nsigma = 2 * 1e-2  # noise variance\ny = gt[x_samp] + sigma * rng.standard_normal(size=M)  # noisy data points\n\n# Data-fidelity term\nsubsamp_mat = sp.sparse.lil_matrix((M, N))\nfor i in range(M):\n    subsamp_mat[i, x_samp[i]] = 1\nG = pxa.LinOp.from_array(subsamp_mat.tocsr())\nF = 1 / 2 * pxo.SquaredL2Norm(dim=y.size).argshift(-y) * G\nF.diff_lipschitz = F.estimate_diff_lipschitz(method=\"svd\")\n\n# Regularization term (promotes sparse second derivatives)\nderiv_mat = sp.sparse.diags(diagonals=[1, -2, 1], offsets=[0, 1, 2], shape=(N - 2, N))\nD = pxa.LinOp.from_array(deriv_mat)\n_lambda = 1e-1  # regularization parameter\nH = _lambda * pxo.L1Norm(dim=D.codim)\n\n# Solver for ADMM\ntau = 1 / _lambda  # internal ADMM parameter\n# Inverse operator to solve the linear system\nA_inv = sp.linalg.inv(G.gram().asarray() + (1 / tau) * D.gram().asarray())\n\ndef solver_ADMM(arr, tau):\n    b = (1 / tau) * D.adjoint(arr) + G.adjoint(y)\n    return A_inv @ b.squeeze()\n\n\n# Solve optimization problem\nadmm = ADMM(f=F, h=H, K=D, solver=solver_ADMM,show_progress=False)  # with solver\nadmm.fit(x0=np.zeros(N), tau=tau)\nx_opt = admm.solution()  # reconstructed signal\n\n# Plots\nplt.figure()\nplt.plot(np.arange(N), gt, label=\"Ground truth\")\nplt.plot(x_samp, y, \"kx\", label=\"Noisy data points\")\nplt.plot(np.arange(N), x_opt, label=\"Reconstructed signal\")\nplt.legend()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "scipy"
          ],
          "code_str": "scipy",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "ADMM"
          ],
          "code_str": "ADMM",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "pyxu.opt.solver.pds.ADMM"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "len"
          ],
          "code_str": "len",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "len"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "scipy",
            "sparse",
            "lil_matrix"
          ],
          "code_str": "sp.sparse.lil_matrix",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "scipy.sparse._lil.lil_matrix"
        },
        {
          "import_components": [
            "scipy",
            "sparse",
            "lil_matrix",
            "()"
          ],
          "code_str": "subsamp_mat",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "scipy.sparse._lil.lil_matrix"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "scipy",
            "sparse",
            "lil_matrix",
            "()"
          ],
          "code_str": "subsamp_mat",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "scipy.sparse._lil.lil_matrix"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp",
            "from_array"
          ],
          "code_str": "pxa.LinOp.from_array",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp.from_array"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm"
          ],
          "code_str": "pxo.SquaredL2Norm",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.SquaredL2Norm"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "SquaredL2Norm",
            "()",
            "argshift"
          ],
          "code_str": "argshift",
          "lineno": 29,
          "end_lineno": 29,
          "context": "after_call",
          "resolved_location": "pyxu.abc.operator.Operator.argshift"
        },
        {
          "import_components": [
            "scipy",
            "sparse",
            "diags"
          ],
          "code_str": "sp.sparse.diags",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "scipy.sparse.diags"
        },
        {
          "import_components": [
            "pyxu",
            "abc",
            "LinOp",
            "from_array"
          ],
          "code_str": "pxa.LinOp.from_array",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "pyxu.abc.operator.LinOp.from_array"
        },
        {
          "import_components": [
            "pyxu",
            "operator",
            "L1Norm"
          ],
          "code_str": "pxo.L1Norm",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "pyxu.operator.func.norm.L1Norm"
        },
        {
          "import_components": [
            "scipy",
            "linalg",
            "inv"
          ],
          "code_str": "sp.linalg.inv",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "scipy.linalg.inv"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "ADMM"
          ],
          "code_str": "ADMM",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.ADMM"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "ADMM",
            "()"
          ],
          "code_str": "admm",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "pyxu.opt.solver.pds.ADMM"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "ADMM",
            "()",
            "fit"
          ],
          "code_str": "admm.fit",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.fit"
        },
        {
          "import_components": [
            "pyxu",
            "opt",
            "solver",
            "ADMM",
            "()",
            "solution"
          ],
          "code_str": "admm.solution",
          "lineno": 51,
          "end_lineno": 51,
          "context": "none",
          "resolved_location": "pyxu.abc.solver.Solver.solution"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 55,
          "end_lineno": 55,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 56,
          "end_lineno": 56,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 57,
          "end_lineno": 57,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 58,
          "end_lineno": 58,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        }
      ],
      "example": {
        "document": "api/opt",
        "ref_id": "id59",
        "headings": [
          "pyxu.opt",
          "Table of Contents",
          "pyxu.opt.solver",
          "Parameters (fit())"
        ]
      },
      "doc_lineno": 2
    }
  ]
}